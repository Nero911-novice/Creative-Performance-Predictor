# main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Creative Performance Predictor.
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏.
"""

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import io
import time
from typing import Dict, Any, Optional, List, Tuple
import warnings
import traceback
import plotly.graph_objects as go
warnings.filterwarnings('ignore')

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from image_analyzer import AdvancedImageAnalyzer
    from ml_engine import AdvancedMLEngine  
    from visualizer import AdvancedVisualizer
    from recommender import IntelligentRecommendationEngine
    from config import (
        APP_TITLE, APP_VERSION, PAGE_ICON, SUPPORTED_IMAGE_FORMATS,
        MAX_IMAGE_SIZE, CUSTOM_CSS, DEMO_INSIGHTS, COLOR_SCHEME
    )
    DEPENDENCIES_OK = True
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
    DEPENDENCIES_OK = False
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫
    AdvancedImageAnalyzer, AdvancedMLEngine, AdvancedVisualizer, IntelligentRecommendationEngine = None, None, None, None
    APP_TITLE, APP_VERSION, PAGE_ICON, SUPPORTED_IMAGE_FORMATS = "Error", "0.0", "‚ùå", []
    MAX_IMAGE_SIZE, CUSTOM_CSS, DEMO_INSIGHTS, COLOR_SCHEME = 0, "", [], {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=f"{APP_TITLE} v{APP_VERSION}",
    page_icon=PAGE_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
if CUSTOM_CSS:
    st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

@st.cache_resource
def get_advanced_app_engines():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–≤–∏–∂–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ú–æ–¥–µ–ª–∏ –æ–±—É—á–∞—é—Ç—Å—è –∑–¥–µ—Å—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
    """
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –¥–≤–∏–∂–∫–æ–≤...")
        
        analyzer = AdvancedImageAnalyzer()
        print("‚úÖ AdvancedImageAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        recommender = IntelligentRecommendationEngine()  
        print("‚úÖ IntelligentRecommendationEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        ml_engine = AdvancedMLEngine()
        print("‚úÖ AdvancedMLEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not ml_engine.is_trained:
            with st.spinner('üß† –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö ML –º–æ–¥–µ–ª–µ–π... –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã.'):
                print("üéì –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
                training_results = ml_engine.train_models(quick_mode=True)
                st.session_state.training_results = training_results
                print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        visualizer = AdvancedVisualizer()
        print("‚úÖ AdvancedVisualizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("üöÄ –í—Å–µ –¥–≤–∏–∂–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        return analyzer, ml_engine, visualizer, recommender
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–æ–≤: {e}")
        st.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
        st.code(traceback.format_exc())
        raise e

class AdvancedCreativePerformanceApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Creative Performance Predictor."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not DEPENDENCIES_OK:
            st.stop()
            
        try:
            self.analyzer, self.ml_engine, self.visualizer, self.recommender = get_advanced_app_engines()
        except Exception as e:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            st.stop()
            
        self._initialize_session_state()
    
    def _initialize_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
        session_defaults = {
            'image_uploaded': False,
            'analysis_completed': False,
            'current_image': None,
            'image_features': {},
            'predictions': {},
            'recommendations': [],
            'analysis_results': {},
            'current_page': '–ì–ª–∞–≤–Ω–∞—è',
            'advanced_mode': False,
            'benchmark_data': {},
            'analysis_history': []
        }
        
        for key, default_value in session_defaults.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        st.markdown(f'<h1 class="main-header">{PAGE_ICON} {APP_TITLE} 2.0</h1>', unsafe_allow_html=True)
        st.markdown('<p style="text-align: center; color: #666; font-size: 1.1em;">–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å –ò–ò</p>', unsafe_allow_html=True)
        
        self._render_sidebar()
        
        page = st.session_state.get('current_page', '–ì–ª–∞–≤–Ω–∞—è')
        
        page_map = {
            '–ì–ª–∞–≤–Ω–∞—è': self._render_home_page,
            '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞': self._render_analysis_page,
            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞': self._render_results_page,
            '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': self._render_recommendations_page,
            '–í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞': self._render_visual_analytics_page,
            '–û —Å–∏—Å—Ç–µ–º–µ': self._render_about_page,
        }
        
        page_function = page_map.get(page)
        if page_function:
            page_function()
    
    def _render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
        with st.sidebar:
            st.markdown("### üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            pages = [
                ('üè†', '–ì–ª–∞–≤–Ω–∞—è'),
                ('üîç', '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'),
                ('üìä', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞'), 
                ('üß†', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'),
                ('üìà', '–í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'),
                ('‚ÑπÔ∏è', '–û —Å–∏—Å—Ç–µ–º–µ')
            ]
            
            for icon, page_name in pages:
                if st.button(f"{icon} {page_name}", key=f"nav_{page_name}", use_container_width=True):
                    st.session_state.current_page = page_name
                    st.rerun()
            
            st.markdown("---")
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            st.session_state.advanced_mode = st.toggle("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º", value=st.session_state.get('advanced_mode', False))
            
            if st.session_state.advanced_mode:
                st.markdown("üî¨ **–î–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
                st.markdown("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
                st.markdown("‚Ä¢ –ù–∞—É—á–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è")
                st.markdown("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            st.markdown("---")
            st.markdown("### üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if self.ml_engine.is_trained:
                st.success("‚úÖ ML –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã")
                if st.session_state.advanced_mode:
                    if hasattr(self.ml_engine, 'model_performance'):
                        avg_r2 = np.mean([
                            np.mean([result.get('r2_score', 0) for result in target_results.values() if 'r2_score' in result])
                            for target_results in self.ml_engine.model_performance.values()
                        ])
                        st.metric("–°—Ä–µ–¥–Ω–∏–π R¬≤", f"{avg_r2:.3f}")
            else:
                st.warning("‚è≥ –ú–æ–¥–µ–ª–∏ –æ–±—É—á–∞—é—Ç—Å—è...")

            if st.session_state.image_uploaded:
                st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                st.info("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            if st.session_state.analysis_completed:
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                if st.session_state.advanced_mode:
                    analysis_time = st.session_state.get('analysis_time', 'N/A')
                    st.metric("–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞", f"{analysis_time}—Å")
            else:
                st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            st.markdown("---")
            st.markdown("### üí° –ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç")
            insight = np.random.choice(DEMO_INSIGHTS)
            st.info(insight)
            
            if st.session_state.advanced_mode:
                st.markdown("---")
                st.markdown("### üîç –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞")
                history_count = len(st.session_state.get('analysis_history', []))
                st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", f"{history_count} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤")
            
            st.markdown("---")
            st.caption(f"–í–µ—Ä—Å–∏—è {APP_VERSION} ‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ò–ò")
    
    def _render_home_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("## üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Creative Performance Predictor 2.0!")
            st.markdown("""
            –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
            
            üß† **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** ‚Äî –ê–Ω—Å–∞–º–±–ª—å ML –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π  
            üëÅÔ∏è **–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ** ‚Äî YOLO –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ EasyOCR –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞  
            üî¨ **–ù–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥** ‚Äî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏  
            üìä **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** ‚Äî –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ heatmaps –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏  
            """)
            
            st.markdown("### üöÄ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ 2.0:")
            
            improvements = [
                "**–†–µ–∞–ª—å–Ω—ã–π OCR** ‚Äî EasyOCR –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫",
                "**YOLO –¥–µ—Ç–µ–∫—Ü–∏—è** ‚Äî –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ª–∏—Ü", 
                "**–ê–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π** ‚Äî Random Forest + Gradient Boosting + XGBoost",
                "**–ù–∞—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** ‚Äî –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ 50+ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                "**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** ‚Äî Heatmaps –∑–æ–Ω –≤–Ω–∏–º–∞–Ω–∏—è",
                "**ROI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä** ‚Äî –†–∞—Å—á–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–π"
            ]
            
            for improvement in improvements:
                st.markdown(f"‚ú® {improvement}")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                st.session_state.current_page = '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'
                st.rerun()

        with col2:
            st.markdown("### üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics_data = [
                ("üéØ", "–¢–æ—á–Ω–æ—Å—Ç—å", "R¬≤ > 0.85", self.advanced_colors.get('performance_excellent', '#00C851')),
                ("‚ö°", "–°–∫–æ—Ä–æ—Å—Ç—å", "< 3 —Å–µ–∫", self.advanced_colors.get('ctr_color', '#2196F3')),
                ("üîß", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", "15+ —Å–æ–≤–µ—Ç–æ–≤", self.advanced_colors.get('engagement_color', '#FF9800')),
                ("üì±", "–§–æ—Ä–º–∞—Ç—ã", "JPG, PNG, WEBP", self.advanced_colors.get('trust_color', '#3F51B5'))
            ]
            
            for icon, metric, value, color in metrics_data:
                st.markdown(f'''
                <div style="padding: 1rem; margin: 0.5rem 0; border-radius: 10px; 
                           background: linear-gradient(135deg, {color}20, {color}10);
                           border-left: 4px solid {color};">
                    <h4 style="margin: 0; color: {color};">{icon} {metric}</h4>
                    <p style="margin: 0; font-weight: bold;">{value}</p>
                </div>
                ''', unsafe_allow_html=True)
            
            st.markdown("### üî¨ –ù–∞—É—á–Ω–∞—è –±–∞–∑–∞")
            st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö MIT, Stanford, Nielsen Norman Group")
            
            # –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if st.session_state.advanced_mode:
                st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                col_a, col_b = st.columns(2)
                with col_a:
                    st.metric("–ê–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è", "247", "+15%")
                with col_b:
                    st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç CTR", "23%", "+2%")

    @property
    def advanced_colors(self):
        """–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–≤–µ—Ç–∞–º visualizer."""
        return getattr(self.visualizer, 'advanced_colors', COLOR_SCHEME)
    
    def _render_analysis_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞."""
        st.header("üîç –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            category = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–∞—Ç–∏–≤–∞", 
                ['–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', 'E-commerce', '–§–∏–Ω–∞–Ω—Å—ã', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ó–¥–æ—Ä–æ–≤—å–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
                help="–í–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )
        with col2:
            region = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", 
                ['–†–æ—Å—Å–∏—è', '–°–®–ê', '–ï–≤—Ä–æ–ø–∞', '–ê–∑–∏—è'],
                help="–£—á–∏—Ç—ã–≤–∞–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è"
            )
        with col3:
            target_audience = st.selectbox(
                "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
                ['–û–±—â–∞—è', '18-25', '25-35', '35-45', '45+'],
                help="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            )

        st.session_state.category = category
        st.session_state.region = region
        st.session_state.target_audience = target_audience

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            type=SUPPORTED_IMAGE_FORMATS,
            help=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_IMAGE_FORMATS)}. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {MAX_IMAGE_SIZE // (1024*1024)}MB"
        )
        
        if uploaded_file is not None:
            if uploaded_file.size > MAX_IMAGE_SIZE:
                st.error(f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_IMAGE_SIZE // (1024*1024)}MB")
                return
            
            try:
                image = Image.open(uploaded_file).convert("RGB")
                st.session_state.current_image = image
                st.session_state.image_uploaded = True
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                img_col, info_col = st.columns([2, 1])
                
                with img_col:
                    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
                
                with info_col:
                    st.markdown("### üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    
                    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {image.size[0]}√ó{image.size[1]}px")
                    st.write(f"**–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:** {image.size[0]/image.size[1]:.2f}")
                    st.write(f"**–§–æ—Ä–º–∞—Ç:** {image.format}")
                    
                    # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size_mb = uploaded_file.size / (1024 * 1024)
                    st.write(f"**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size_mb:.1f}MB")
                    
                    # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
                    st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}")
                    st.write(f"**–†–µ–≥–∏–æ–Ω:** {region}")
                    st.write(f"**–ê—É–¥–∏—Ç–æ—Ä–∏—è:** {target_audience}")
                    
                    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if st.session_state.advanced_mode:
                        st.markdown("### üî¨ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                        use_ai_enhancement = st.checkbox("–ò–ò —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", value=True)
                        detailed_analysis = st.checkbox("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", value=True)
                        
                        st.session_state.use_ai_enhancement = use_ai_enhancement
                        st.session_state.detailed_analysis = detailed_analysis

                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                    self._perform_advanced_analysis(image, category, region, target_audience)
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                if st.session_state.advanced_mode:
                    st.code(traceback.format_exc())
        
        else:
            st.info("üëÜ **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**")
            
            col_demo, col_space = st.columns([1, 1])
            with col_demo:
                if st.button("üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True):
                    demo_image = self._create_advanced_demo_image()
                    if demo_image:
                        st.session_state.current_image = demo_image
                        st.session_state.image_uploaded = True
                        st.success("‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑'.")
                        st.rerun()

    def _perform_advanced_analysis(self, image: Image.Image, category: str, region: str, target_audience: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        start_time = time.time()
        
        progress_container = st.container()
        with progress_container:
            progress_bar = st.progress(0, text="üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        try:
            def update_progress(percent, text):
                progress_bar.progress(percent, text=text)
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX

            # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            update_progress(5, "üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            if not self.analyzer.load_image(image):
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.")
                return
            
            # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            update_progress(15, "üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏...")
            color_analysis = self.analyzer.analyze_colors()
            
            # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å YOLO
            update_progress(30, "üèóÔ∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–≤...")
            composition_analysis = self.analyzer.analyze_composition()
            
            # –≠—Ç–∞–ø 4: –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            update_progress(45, "üìù OCR –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
            text_analysis = self.analyzer.analyze_text()
            
            # –≠—Ç–∞–ø 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            update_progress(60, "üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML...")
            image_features = self.analyzer.get_all_features()
            image_features['category'] = category
            image_features['region'] = region
            image_features['target_audience'] = target_audience
            
            st.session_state.image_features = image_features

            # –≠—Ç–∞–ø 6: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            update_progress(75, "üîÆ –ê–Ω—Å–∞–º–±–ª—å ML –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
            predictions = self.ml_engine.predict(image_features)
            confidence_intervals = self.ml_engine.get_prediction_confidence(image_features)
            
            # –≠—Ç–∞–ø 7: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            update_progress(85, "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            recommendations = self.recommender.generate_intelligent_recommendations(
                image_features, predictions, category, target_audience
            )
            
            # –≠—Ç–∞–ø 8: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            update_progress(95, "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            analysis_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.session_state.analysis_results = {
                'color_analysis': color_analysis,
                'composition_analysis': composition_analysis,
                'text_analysis': text_analysis,
                'image_features': image_features,
                'predictions': predictions,
                'confidence_intervals': confidence_intervals,
                'recommendations': recommendations,
                'analysis_time': analysis_time,
                'timestamp': time.time()
            }
            
            st.session_state.predictions = predictions
            st.session_state.recommendations = recommendations
            st.session_state.analysis_completed = True
            st.session_state.analysis_time = f"{analysis_time:.1f}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if 'analysis_history' not in st.session_state:
                st.session_state.analysis_history = []
            
            st.session_state.analysis_history.append({
                'timestamp': time.time(),
                'category': category,
                'predictions': predictions,
                'analysis_time': analysis_time
            })
            
            update_progress(100, "‚úÖ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            time.sleep(0.5)
            progress_container.empty()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._show_quick_results(predictions, analysis_time)
            
        except Exception as e:
            progress_container.empty()
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            if st.session_state.advanced_mode:
                st.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
                st.code(traceback.format_exc())

    def _show_quick_results(self, predictions: Dict, analysis_time: float):
        """–ü–æ–∫–∞–∑ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        st.success("üéâ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            ctr_color = self._get_metric_color(predictions['ctr'], 'ctr')
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: {ctr_color}20; border-radius: 10px;">
                <h3 style="color: {ctr_color}; margin: 0;">CTR</h3>
                <h2 style="margin: 0;">{predictions['ctr']*100:.2f}%</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            conv_color = self._get_metric_color(predictions['conversion_rate'], 'conversion_rate')
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: {conv_color}20; border-radius: 10px;">
                <h3 style="color: {conv_color}; margin: 0;">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
                <h2 style="margin: 0;">{predictions['conversion_rate']*100:.2f}%</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            eng_color = self._get_metric_color(predictions['engagement'], 'engagement')
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: {eng_color}20; border-radius: 10px;">
                <h3 style="color: {eng_color}; margin: 0;">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</h3>
                <h2 style="margin: 0;">{predictions['engagement']*100:.1f}%</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div style="text-align: center; padding: 1rem; background: #2196F320; border-radius: 10px;">
                <h3 style="color: #2196F3; margin: 0;">–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞</h3>
                <h2 style="margin: 0;">{analysis_time:.1f}—Å</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        col_nav1, col_nav2 = st.columns(2)
        
        with col_nav1:
            if st.button("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="primary", use_container_width=True):
                st.session_state.current_page = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞'
                st.rerun()
        
        with col_nav2:
            if st.button("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", use_container_width=True):
                st.session_state.current_page = '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
                st.rerun()

    def _get_metric_color(self, value: float, metric_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        thresholds = {
            'ctr': {'excellent': 0.04, 'good': 0.025},
            'conversion_rate': {'excellent': 0.08, 'good': 0.05},
            'engagement': {'excellent': 0.15, 'good': 0.10}
        }
        
        if value >= thresholds[metric_type]['excellent']:
            return '#00C851'  # –ó–µ–ª–µ–Ω—ã–π
        elif value >= thresholds[metric_type]['good']:
            return '#FF9800'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return '#F44336'  # –ö—Ä–∞—Å–Ω—ã–π

    def _render_results_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'.")
            if st.button("üîç –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É"):
                st.session_state.current_page = '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'
                st.rerun()
            return
        
        st.header("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        analysis_results = st.session_state.analysis_results
        predictions = analysis_results['predictions']
        
        # –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
        st.subheader("üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = st.session_state.get('category', '–û–±—â–∞—è')
        benchmarks = self._get_category_benchmarks(category)
        
        dashboard_fig = self.visualizer.create_performance_dashboard(
            predictions, 
            analysis_results.get('confidence_intervals'),
            benchmarks
        )
        st.plotly_chart(dashboard_fig, use_container_width=True)
        
        # –¢–∞–±—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", "üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "üèóÔ∏è –ö–æ–º–ø–æ–∑–∏—Ü–∏—è", 
            "üìù –¢–µ–∫—Å—Ç –∏ OCR", "üéØ –ó–æ–Ω—ã –≤–Ω–∏–º–∞–Ω–∏—è"
        ])
        
        with tab1:
            self._render_predictions_tab(analysis_results)
        
        with tab2:
            self._render_color_psychology_tab(analysis_results)
        
        with tab3:
            self._render_composition_tab(analysis_results)
        
        with tab4:
            self._render_text_analysis_tab(analysis_results)
        
        with tab5:
            self._render_attention_heatmap_tab(analysis_results)

    def _render_predictions_tab(self, analysis_results: Dict):
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        st.subheader("üîÆ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        predictions = analysis_results['predictions']
        feature_importance = self.ml_engine.get_feature_importance('ctr')
        confidence_intervals = analysis_results.get('confidence_intervals', {})
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        detailed_pred_fig = self.visualizer.create_performance_prediction_detailed(
            predictions, feature_importance, confidence_intervals
        )
        st.plotly_chart(detailed_pred_fig, use_container_width=True)
        
        if st.session_state.advanced_mode:
            # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.markdown("### üî¨ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            explanation = self.ml_engine.explain_prediction(st.session_state.image_features)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:**")
                confidence = explanation.get('model_confidence', 0.8)
                st.progress(confidence, text=f"{confidence:.1%}")
                
                st.markdown("**–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**")
                st.info(explanation.get('performance_category', '–°—Ä–µ–¥–Ω—è—è'))
            
            with col2:
                st.markdown("**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:**")
                priority = explanation.get('recommendation_priority', '–°—Ä–µ–¥–Ω–∏–π')
                priority_color = {'–í—ã—Å–æ–∫–∏–π': 'üî¥', '–°—Ä–µ–¥–Ω–∏–π': 'üü°', '–ù–∏–∑–∫–∏–π': 'üü¢'}
                st.markdown(f"{priority_color.get(priority, 'üü°')} {priority}")
                
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**")
                for insight in explanation.get('key_insights', [])[:3]:
                    st.markdown(f"‚Ä¢ {insight}")

    def _render_color_psychology_tab(self, analysis_results: Dict):
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏."""
        st.subheader("üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏")
        
        color_data = analysis_results['color_analysis']
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
        color_fig = self.visualizer.create_color_psychology_analysis(color_data)
        st.plotly_chart(color_fig, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö
        if 'dominant_colors' in color_data and color_data['dominant_colors']:
            st.markdown("### üåà –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ")
            
            colors = color_data['dominant_colors'][:5]
            cols = st.columns(len(colors))
            
            for i, color in enumerate(colors):
                with cols[i]:
                    hex_color = f"#{color[0]:02x}{color[1]:02x}{color[2]:02x}"
                    st.markdown(f"""
                    <div style="width: 100%; height: 60px; background-color: {hex_color}; 
                                border-radius: 5px; margin-bottom: 10px;"></div>
                    <p style="text-align: center; font-size: 12px;">
                        RGB({color[0]}, {color[1]}, {color[2]})<br>
                        {self._get_color_psychology(color)}
                    </p>
                    """, unsafe_allow_html=True)

    def _render_composition_tab(self, analysis_results: Dict):
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏."""
        st.subheader("üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
        
        composition_data = analysis_results['composition_analysis']
        
        # 3D –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        if st.session_state.advanced_mode:
            comp_3d_fig = self.visualizer.create_composition_analysis_3d(composition_data)
            st.plotly_chart(comp_3d_fig, use_container_width=True)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        comp_fig = self.visualizer.plot_composition_analysis_3d(composition_data)
        st.plotly_chart(comp_fig, use_container_width=True)
        
        # –î–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìê –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã")
            principles = [
                ("–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π", composition_data.get('rule_of_thirds_score', 0)),
                ("–í–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", composition_data.get('visual_balance_score', 0)),
                ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å", composition_data.get('center_focus_score', 0)),
            ]
            
            for principle, score in principles:
                color = '#00C851' if score > 0.7 else '#FF9800' if score > 0.4 else '#F44336'
                st.markdown(f"**{principle}:** <span style='color: {color}'>{score:.2f}</span>", unsafe_allow_html=True)
        
        with col2:
            st.markdown("### üéØ –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã")
            focal_points = composition_data.get('focal_points', 0)
            if focal_points > 0:
                st.success(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {focal_points} –∫–ª—é—á–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
                st.info("–û–±—ä–µ–∫—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª—è")
            else:
                st.warning("‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                st.info("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

    def _render_text_analysis_tab(self, analysis_results: Dict):
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞."""
        st.subheader("üìù OCR –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
        
        text_data = analysis_results['text_analysis']
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤", text_data.get('text_amount', 0))
        with col2:
            st.metric("–°–∏–º–≤–æ–ª–æ–≤", text_data.get('total_characters', 0))
        with col3:
            cta_status = "–ï—Å—Ç—å ‚úÖ" if text_data.get('has_cta', False) else "–ù–µ—Ç ‚ùå"
            st.metric("–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é", cta_status)
        with col4:
            readability = text_data.get('readability_score', 0)
            st.metric("–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å", f"{readability:.2f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        st.markdown("### üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞")
        
        text_metrics = [
            ("–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å", text_data.get('readability_score', 0)),
            ("–ò–µ—Ä–∞—Ä—Ö–∏—è", text_data.get('text_hierarchy', 0)),
            ("–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", text_data.get('text_positioning', 0)),
            ("–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", text_data.get('text_contrast', 0)),
        ]
        
        for metric, value in text_metrics:
            st.progress(value, text=f"{metric}: {value:.2f}")
        
        if st.session_state.advanced_mode and text_data.get('text_amount', 0) > 0:
            st.markdown("### üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è OCR")
            st.json({
                "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞": text_data.get('text_density', 0),
                "–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞": text_data.get('text_coverage', 0),
                "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤": text_data.get('font_variety', 0),
                "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": text_data.get('text_to_image_ratio', 0)
            })

    def _render_attention_heatmap_tab(self, analysis_results: Dict):
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–∞ —Å heatmap –≤–Ω–∏–º–∞–Ω–∏—è."""
        st.subheader("üéØ –ö–∞—Ä—Ç–∞ –∑–æ–Ω –≤–Ω–∏–º–∞–Ω–∏—è")
        
        st.info("Heatmap –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
        
        # –°–æ–∑–¥–∞–µ–º heatmap
        heatmap_fig = self.visualizer.create_attention_heatmap(
            st.session_state.image_features, 
            analysis_results['predictions']
        )
        st.plotly_chart(heatmap_fig, use_container_width=True)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–æ–Ω
        st.markdown("### üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–æ–Ω –≤–Ω–∏–º–∞–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üî• –ö—Ä–∞—Å–Ω—ã–µ –∑–æ–Ω—ã** ‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ
            - –¢–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ—Ç–µ–π
            - –û–±–ª–∞—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
            - –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            """)
        
        with col2:
            st.markdown("""
            **üü° –ñ–µ–ª—Ç—ã–µ –∑–æ–Ω—ã** ‚Äî –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ  
            - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            - –ó–æ–Ω—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
            - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
            """)
        
        if st.session_state.advanced_mode:
            st.markdown("### üî¨ –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ")
            st.markdown("""
            –ö–∞—Ä—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
            - **F-–ø–∞—Ç—Ç–µ—Ä–Ω —á—Ç–µ–Ω–∏—è** (Nielsen Norman Group)
            - **–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π** (Golden Ratio Research)
            - **–≠—Ñ—Ñ–µ–∫—Ç –∏–∑–æ–ª—è—Ü–∏–∏** (Von Restorff Effect)
            - **–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ** (Attention Psychology)
            """)

    def _render_recommendations_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'.")
            return
        
        st.header("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò")
        
        recommendations = st.session_state.recommendations
        
        if not recommendations:
            st.success("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            st.info("–í–∞—à –∫—Ä–µ–∞—Ç–∏–≤ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º.")
            return
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_impact = sum(rec.expected_impact for rec in recommendations)
        avg_confidence = np.mean([rec.confidence for rec in recommendations])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞", f"{total_impact:.1%}")
        with col2:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", len(recommendations))
        with col3:
            st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.1%}")
        
        # –ö–∞—Ä—Ç–∞ –≤–ª–∏—è–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        impact_fig = self.visualizer.create_recommendation_impact_chart(recommendations)
        st.plotly_chart(impact_fig, use_container_width=True)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col_filter1, col_filter2 = st.columns(2)
        with col_filter1:
            priority_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", ["–í—Å–µ", "high", "medium", "low"])
        with col_filter2:
            category_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                                         ["–í—Å–µ"] + list(set(rec.category for rec in recommendations)))
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_recs = recommendations
        if priority_filter != "–í—Å–µ":
            filtered_recs = [r for r in filtered_recs if r.priority == priority_filter]
        if category_filter != "–í—Å–µ":
            filtered_recs = [r for r in filtered_recs if r.category == category_filter]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        for i, rec in enumerate(filtered_recs):
            self._render_recommendation_card(rec, i)
        
        # –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
        if st.session_state.advanced_mode:
            st.subheader("üó∫Ô∏è –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è")
            roadmap = self.recommender.create_implementation_roadmap(recommendations)
            self._render_implementation_roadmap(roadmap)

    def _render_recommendation_card(self, rec, index: int):
        """–†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        priority_colors = {
            'high': '#F44336',
            'medium': '#FF9800', 
            'low': '#4CAF50'
        }
        
        priority_emoji = {
            'high': 'üî•',
            'medium': '‚ö°',
            'low': 'üí°'
        }
        
        color = priority_colors.get(rec.priority, '#4CAF50')
        emoji = priority_emoji.get(rec.priority, 'üí°')
        
        with st.expander(f"{emoji} {rec.title}", expanded=(index < 3)):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {rec.description}")
                
                st.markdown("**–ü–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
                for step in rec.actionable_steps:
                    st.markdown(f"‚Ä¢ {step}")
                
                if st.session_state.advanced_mode:
                    st.markdown(f"**–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {rec.scientific_basis}")
            
            with col2:
                # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** <span style='color: {color}'>{rec.priority.upper()}</span>", unsafe_allow_html=True)
                st.metric("–û–∂–∏–¥–∞–µ–º–æ–µ –≤–ª–∏—è–Ω–∏–µ", f"{rec.expected_impact:.1%}")
                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{rec.confidence:.1%}")
                st.metric("–í—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", rec.time_estimate)
                st.metric("–£—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π", rec.effort_level.title())
                
                if hasattr(rec, 'roi_estimate'):
                    st.metric("ROI –æ—Ü–µ–Ω–∫–∞", f"{rec.roi_estimate:.1f}x")
                
                # –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                if hasattr(rec, 'tools_needed') and rec.tools_needed:
                    st.markdown("**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**")
                    for tool in rec.tools_needed:
                        st.markdown(f"‚Ä¢ {tool}")

    def _render_visual_analytics_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–∞'.")
            return
        
        st.header("üìà –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏–Ω—Å–∞–π—Ç—ã")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            ["–û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥", "–¶–≤–µ—Ç–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ö–∞—Ä—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]
        )
        
        analysis_results = st.session_state.analysis_results
        
        if viz_type == "–û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥":
            dashboard_fig = self.visualizer.create_performance_dashboard(
                analysis_results['predictions'],
                analysis_results.get('confidence_intervals'),
                self._get_category_benchmarks(st.session_state.get('category', '–û–±—â–∞—è'))
            )
            st.plotly_chart(dashboard_fig, use_container_width=True)
        
        elif viz_type == "–¶–≤–µ—Ç–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è":
            color_fig = self.visualizer.create_color_psychology_analysis(
                analysis_results['color_analysis']
            )
            st.plotly_chart(color_fig, use_container_width=True)
        
        elif viz_type == "–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
            comp_fig = self.visualizer.create_composition_analysis_3d(
                analysis_results['composition_analysis']
            )
            st.plotly_chart(comp_fig, use_container_width=True)
        
        elif viz_type == "–ö–∞—Ä—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è":
            heatmap_fig = self.visualizer.create_attention_heatmap(
                st.session_state.image_features,
                analysis_results['predictions']
            )
            st.plotly_chart(heatmap_fig, use_container_width=True)
        
        elif viz_type == "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
            self._render_comparative_analysis()

    def _render_about_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û —Å–∏—Å—Ç–µ–º–µ'."""
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ Creative Performance Predictor 2.0")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            ## üé® Creative Performance Predictor 2.0
            **–í–µ—Ä—Å–∏—è {APP_VERSION}** ‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
            
            ### üß† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
            
            **–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:**
            - –ê–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π: Random Forest + Gradient Boosting + XGBoost
            - Feature Engineering —Å –Ω–∞—É—á–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
            - –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            
            **–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ:**
            - EasyOCR/Tesseract –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
            - YOLO v8 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            
            **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ 50+ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
            - –ü—Ä–∏–Ω—Ü–∏–ø—ã –Ω–µ–π—Ä–æ–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
            - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
            
            **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:**
            - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã —Å Plotly
            - Heatmaps –∑–æ–Ω –≤–Ω–∏–º–∞–Ω–∏—è
            - 3D –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            """)
        
        with col2:
            st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            
            if 'training_results' in st.session_state:
                st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:**")
                training_results = st.session_state.training_results
                
                for target, results in training_results.items():
                    if isinstance(results, dict):
                        for model, metrics in results.items():
                            if isinstance(metrics, dict) and 'r2_score' in metrics:
                                r2 = metrics['r2_score']
                                st.metric(f"{target} ({model})", f"R¬≤ = {r2:.3f}")
            
            st.markdown("### üî¨ –ù–∞—É—á–Ω–∞—è –±–∞–∑–∞")
            st.info("""
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö:
            ‚Ä¢ MIT Neuromarketing Lab
            ‚Ä¢ Stanford Psychology Dept
            ‚Ä¢ Nielsen Norman Group
            ‚Ä¢ Cambridge Color Research
            """)
            
            if st.session_state.advanced_mode:
                st.markdown("### ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏")
                st.code(f"""
                –í–µ—Ä—Å–∏—è: {APP_VERSION}
                ML –¥–≤–∏–∂–æ–∫: AdvancedMLEngine
                –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: AdvancedImageAnalyzer  
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: IntelligentRecommendationEngine
                –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: AdvancedVisualizer
                """)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _get_category_benchmarks(self, category: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        benchmarks_map = {
            'E-commerce': {'ctr': 0.035, 'conversion_rate': 0.082, 'engagement': 0.124},
            '–§–∏–Ω–∞–Ω—Å—ã': {'ctr': 0.022, 'conversion_rate': 0.064, 'engagement': 0.089},
            '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏': {'ctr': 0.041, 'conversion_rate': 0.045, 'engagement': 0.156},
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': {'ctr': 0.028, 'conversion_rate': 0.071, 'engagement': 0.134},
            '–ó–¥–æ—Ä–æ–≤—å–µ': {'ctr': 0.031, 'conversion_rate': 0.067, 'engagement': 0.098},
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {'ctr': 0.025, 'conversion_rate': 0.055, 'engagement': 0.087}
        }
        return benchmarks_map.get(category, {'ctr': 0.025, 'conversion_rate': 0.05, 'engagement': 0.1})

    def _get_color_psychology(self, color: Tuple[int, int, int]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–≤–µ—Ç–∞."""
        r, g, b = color
        
        if r > g and r > b:
            return "–≠–Ω–µ—Ä–≥–∏—è, —Å—Ç—Ä–∞—Å—Ç—å"
        elif g > r and g > b:
            return "–ü—Ä–∏—Ä–æ–¥–∞, —Ä–æ—Å—Ç"
        elif b > r and b > g:
            return "–î–æ–≤–µ—Ä–∏–µ, —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
        else:
            return "–ë–∞–ª–∞–Ω—Å"

    def _create_advanced_demo_image(self) -> Optional[Image.Image]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            width, height = 800, 600
            image = Image.new('RGB', (width, height))
            draw = ImageDraw.Draw(image)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            for y in range(height):
                r = int(255 * (1 - y/height * 0.3))
                g = int(180 * (1 - y/height * 0.5))
                b = 80
                draw.line([(0, y), (width, y)], fill=(r, g, b))
            
            # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                font_large = ImageFont.load_default(size=48)
                font_medium = ImageFont.load_default(size=24)
                font_small = ImageFont.load_default(size=16)
            except:
                font_large = ImageFont.load_default()
                font_medium = ImageFont.load_default()
                font_small = ImageFont.load_default()
            
            main_text = "DEMO CREATIVE 2.0"
            bbox = draw.textbbox((0, 0), main_text, font=font_large)
            x = (width - (bbox[2] - bbox[0])) / 2
            y = height / 4
            draw.text((x, y), main_text, fill="white", font=font_large)
            
            # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            sub_text = "–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"
            bbox = draw.textbbox((0, 0), sub_text, font=font_medium)
            x = (width - (bbox[2] - bbox[0])) / 2
            y = height / 2.5
            draw.text((x, y), sub_text, fill="lightgray", font=font_medium)
            
            # CTA –∫–Ω–æ–ø–∫–∞
            button_x, button_y = width / 2, height - 120
            button_w, button_h = 220, 60
            draw.rectangle([
                button_x - button_w/2, button_y - button_h/2, 
                button_x + button_w/2, button_y + button_h/2
            ], fill="red", outline="darkred", width=2)
            
            cta_text = "–ü–û–ü–†–û–ë–û–í–ê–¢–¨ –°–ï–ô–ß–ê–°"
            cta_bbox = draw.textbbox((0, 0), cta_text, font=font_small)
            cta_x = button_x - (cta_bbox[2] - cta_bbox[0]) / 2
            cta_y = button_y - (cta_bbox[3] - cta_bbox[1]) / 2
            draw.text((cta_x, cta_y), cta_text, fill="white", font=font_small)
            
            # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for i in range(3):
                x = 100 + i * 250
                y = height - 200
                draw.ellipse([x-30, y-30, x+30, y+30], fill="yellow", outline="orange", width=2)
            
            return image
            
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            return None

    def _render_comparative_analysis(self):
        """–†–µ–Ω–¥–µ—Ä —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        st.subheader("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        if len(st.session_state.get('analysis_history', [])) < 2:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.")
            return
        
        history = st.session_state.analysis_history
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
        df_history = pd.DataFrame(history)
        df_history['timestamp'] = pd.to_datetime(df_history['timestamp'], unit='s')
        
        fig = go.Figure()
        
        for metric in ['ctr', 'conversion_rate', 'engagement']:
            values = [pred[metric] * 100 for pred in df_history['predictions']]
            fig.add_trace(go.Scatter(
                x=df_history['timestamp'], y=values,
                mode='lines+markers', name=metric.upper()
            ))
        
        fig.update_layout(
            title="–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ (%)",
            template='plotly_white'
        )
        
        st.plotly_chart(fig, use_container_width=True)

    def _render_implementation_roadmap(self, roadmap: Dict):
        """–†–µ–Ω–¥–µ—Ä –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è."""
        st.markdown("### üó∫Ô∏è –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è")
        
        for phase_key, phase_data in roadmap.items():
            if phase_key == 'summary':
                continue
                
            with st.expander(phase_data['title'], expanded=True):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ", f"{phase_data['total_impact']:.1%}")
                with col2:
                    st.metric("–í—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", f"{phase_data['total_time']:.1f}—á")
                with col3:
                    st.metric("ROI –æ—Ü–µ–Ω–∫–∞", f"{phase_data['roi_estimate']:.1f}x")
                
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ:**")
                for rec in phase_data['recommendations']:
                    st.markdown(f"‚Ä¢ {rec.title}")


if __name__ == "__main__":
    if DEPENDENCIES_OK:
        app = AdvancedCreativePerformanceApp()
        app.run()
