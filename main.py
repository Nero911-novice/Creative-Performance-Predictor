# main.py
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Creative Performance Predictor.
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.
"""

# main.py
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Creative Performance Predictor.
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.
"""

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image
import io
import time
from typing import Dict, Any, Optional
import warnings
warnings.filterwarnings('ignore')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
missing_deps = []

try:
    from image_analyzer import ImageAnalyzer
except ImportError as e:
    missing_deps.append(f"Image Analyzer: {str(e)}")
    ImageAnalyzer = None

try:
    from ml_engine import MLEngine
except ImportError as e:
    missing_deps.append(f"ML Engine: {str(e)}")
    MLEngine = None

try:
    from visualizer import Visualizer
except ImportError as e:
    missing_deps.append(f"Visualizer: {str(e)}")
    Visualizer = None

try:
    from recommender import RecommendationEngine
except ImportError as e:
    missing_deps.append(f"Recommender: {str(e)}")
    RecommendationEngine = None

try:
    from config import (
        APP_TITLE, APP_VERSION, PAGE_ICON, SUPPORTED_IMAGE_FORMATS,
        MAX_IMAGE_SIZE, CUSTOM_CSS, DEMO_INSIGHTS, COLOR_SCHEME
    )
except ImportError as e:
    missing_deps.append(f"Config: {str(e)}")
    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
    APP_TITLE = "Creative Performance Predictor"
    APP_VERSION = "1.0.0"
    PAGE_ICON = "üé®"
    SUPPORTED_IMAGE_FORMATS = ['jpg', 'jpeg', 'png']
    MAX_IMAGE_SIZE = 10 * 1024 * 1024
    CUSTOM_CSS = ""
    DEMO_INSIGHTS = ["–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –≤–∞—à–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤!"]
    COLOR_SCHEME = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=f"{APP_TITLE} v{APP_VERSION}",
    page_icon=PAGE_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
if CUSTOM_CSS:
    st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

class CreativePerformanceApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Creative Performance Predictor."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not all([ImageAnalyzer, MLEngine, Visualizer, RecommendationEngine]):
            st.error("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            return
            
        self.analyzer = ImageAnalyzer()
        self.ml_engine = MLEngine()
        self.visualizer = Visualizer()
        self.recommender = RecommendationEngine()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        self._initialize_session_state()
    
    def _try_load_pretrained_model(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å."""
        try:
            import pickle
            import os
            
            if os.path.exists('quick_model.pkl'):
                with open('quick_model.pkl', 'rb') as f:
                    model_data = pickle.load(f)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ML engine
                if 'models' in model_data:
                    self.ml_engine.models.update(model_data['models'])
                if 'scalers' in model_data:
                    self.ml_engine.scalers.update(model_data['scalers'])
                if 'feature_names' in model_data:
                    self.ml_engine.feature_names = model_data['feature_names']
                if 'is_trained' in model_data:
                    self.ml_engine.is_trained = model_data['is_trained']
                    st.session_state.model_trained = True
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if 'pretrained_loaded' not in st.session_state:
                    st.session_state.pretrained_loaded = True
                    st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        
        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            pass
    
    def _initialize_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
        session_defaults = {
            'model_trained': False,
            'image_uploaded': False,
            'analysis_completed': False,
            'current_image': None,
            'image_features': {},
            'predictions': {},
            'recommendations': [],
            'analysis_results': {}
        }
        
        for key, default_value in session_defaults.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
    
    def _train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏."""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∑–∞–Ω–æ–≤–æ
            self.ml_engine._initialize_models()
            
            with st.spinner('ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...'):
                # –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                training_results = self.ml_engine.train_models(quick_mode=True)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –æ–±—É—á–µ–Ω–Ω–æ–µ
                self.ml_engine.is_trained = True
                st.session_state.model_trained = True
                st.session_state.training_results = training_results
                
                st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è", expanded=False):
                    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {len(self.ml_engine.feature_names)}")
                    for target, models in training_results.items():
                        st.write(f"**{target.upper()}:**")
                        for model_name, metrics in models.items():
                            r2 = metrics.get('r2_score', 0)
                            st.write(f"  - {model_name}: R¬≤ = {r2:.3f}")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            st.session_state.model_trained = False
            if hasattr(self, 'ml_engine'):
                self.ml_engine.is_trained = False
            
            with st.expander("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
                st.code(str(e))
            
            if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
                st.rerun()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        st.markdown(f'<h1 class="main-header">{PAGE_ICON} {APP_TITLE}</h1>', 
                   unsafe_allow_html=True)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        self._render_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        page = st.session_state.get('current_page', '–ì–ª–∞–≤–Ω–∞—è')
        
        if page == '–ì–ª–∞–≤–Ω–∞—è':
            self._render_home_page()
        elif page == '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':
            self._render_analysis_page()
        elif page == '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã':
            self._render_results_page()
        elif page == '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
            self._render_recommendations_page()
        elif page == '–û –ø—Ä–æ–µ–∫—Ç–µ':
            self._render_about_page()
    
    def _render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
        with st.sidebar:
            st.markdown("### üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            pages = [
                ('üè†', '–ì–ª–∞–≤–Ω–∞—è'),
                ('üîç', '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
                ('üìä', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'),
                ('üí°', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'),
                ('‚ÑπÔ∏è', '–û –ø—Ä–æ–µ–∫—Ç–µ')
            ]
            
            for icon, page_name in pages:
                if st.button(f"{icon} {page_name}", key=f"nav_{page_name}"):
                    st.session_state.current_page = page_name
                    st.rerun()
            
            st.markdown("---")
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            st.markdown("### üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            
            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            if st.session_state.model_trained:
                st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
            else:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
                if st.button("üîÑ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="retrain_sidebar"):
                    self._train_model()
                    st.rerun()
            
            # –°—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if st.session_state.image_uploaded:
                st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                st.info("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            # –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
            if st.session_state.analysis_completed:
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            st.markdown("---")
            
            # –î–µ–º–æ-–∏–Ω—Å–∞–π—Ç—ã
            st.markdown("### üí≠ –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?")
            insight = np.random.choice(DEMO_INSIGHTS)
            st.info(insight)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
            st.markdown("---")
            st.caption(f"–í–µ—Ä—Å–∏—è {APP_VERSION}")
    
    def _render_home_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            ## üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Creative Performance Predictor!
            
            –≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ 
            —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
            
            ### üîç –ß—Ç–æ —É–º–µ–µ—Ç —Å–∏—Å—Ç–µ–º–∞:
            
            **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**
            - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            - –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
            - –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**
            - –ü—Ä–æ–≥–Ω–æ–∑ CTR (Click-Through Rate)
            - –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
            - –ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            
            **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            - –ü–æ—à–∞–≥–æ–≤—ã–µ –ø–ª–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
            """)
            
            # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            if st.session_state.model_trained:
                if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", key="quick_start"):
                    st.session_state.current_page = '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                    st.rerun()
            else:
                if st.button("ü§ñ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary", key="train_model_main"):
                    self._train_model()
                    st.rerun()
        
        with col2:
            st.markdown("### üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            metrics_data = [
                ("üéØ", "–¢–æ—á–Ω–æ—Å—Ç—å", "R¬≤ > 0.85"),
                ("‚ö°", "–°–∫–æ—Ä–æ—Å—Ç—å", "< 5 —Å–µ–∫"),
                ("üîß", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "10+ —Å–æ–≤–µ—Ç–æ–≤"),
                ("üì±", "–§–æ—Ä–º–∞—Ç—ã", "JPG, PNG, WEBP")
            ]
            
            for icon, metric, value in metrics_data:
                with st.container():
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>{icon} {metric}</h4>
                        <p>{value}</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞
            st.markdown("### üñºÔ∏è –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞")
            st.image("https://via.placeholder.com/300x200/667eea/ffffff?text=Demo+Creative", 
                    caption="–î–µ–º–æ-–∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            if st.button("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ"):
                st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!")
    
    def _render_analysis_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        st.header("üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            type=SUPPORTED_IMAGE_FORMATS,
            help=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_IMAGE_FORMATS)}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_IMAGE_SIZE // (1024*1024)}MB"
        )
        
        if uploaded_file is not None:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if uploaded_file.size > MAX_IMAGE_SIZE:
                st.error(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_IMAGE_SIZE // (1024*1024)}MB")
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                image = Image.open(uploaded_file)
                st.session_state.current_image = image
                st.session_state.image_uploaded = True
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
                
                with col2:
                    st.markdown("### üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {image.size[0]} √ó {image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
                    st.write(f"**–§–æ—Ä–º–∞—Ç:** {image.format}")
                    st.write(f"**–†–µ–∂–∏–º:** {image.mode}")
                    st.write(f"**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {uploaded_file.size / 1024:.1f} KB")
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                if st.session_state.model_trained:
                    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", key="start_analysis"):
                        self._perform_analysis(image)
                else:
                    st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞.")
                    if st.button("ü§ñ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary", key="train_before_analysis"):
                        self._train_model()
                        st.rerun()
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
        else:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.info("""
            üëÜ **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞**
            
            –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
            - –¶–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            - –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  
            - –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            - –ü—Ä–µ–¥—Å–∫–∞–∂–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            """)
            
            # –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if st.button("üé≤ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                demo_image = self._create_demo_image()
                if demo_image:
                    st.session_state.current_image = demo_image
                    st.session_state.image_uploaded = True
                    st.success("‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    def _perform_analysis(self, image: Image.Image):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            status_text.text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            progress_bar.progress(10)
            
            if not self.analyzer.load_image(image):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            time.sleep(0.5)  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
            # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            status_text.text("üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
            progress_bar.progress(30)
            
            color_analysis = self.analyzer.analyze_colors()
            time.sleep(0.5)
            
            # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            status_text.text("üìê –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏...")
            progress_bar.progress(50)
            
            composition_analysis = self.analyzer.analyze_composition()
            time.sleep(0.5)
            
            # –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            status_text.text("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
            progress_bar.progress(70)
            
            text_analysis = self.analyzer.analyze_text()
            time.sleep(0.5)
            
            # –≠—Ç–∞–ø 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML
            status_text.text("üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")
            progress_bar.progress(80)
            
            image_features = self.analyzer.get_all_features()
            st.session_state.image_features = image_features
            
            # –≠—Ç–∞–ø 6: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            status_text.text("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            progress_bar.progress(90)
            
            predictions = self.ml_engine.predict(image_features)
            confidence_intervals = self.ml_engine.get_prediction_confidence(image_features)
            
            # –≠—Ç–∞–ø 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            status_text.text("üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            progress_bar.progress(100)
            
            recommendations = self.recommender.generate_recommendations(
                image_features, predictions
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.session_state.analysis_results = {
                'color_analysis': color_analysis,
                'composition_analysis': composition_analysis,
                'text_analysis': text_analysis,
                'image_features': image_features,
                'predictions': predictions,
                'confidence_intervals': confidence_intervals,
                'recommendations': recommendations
            }
            
            st.session_state.predictions = predictions
            st.session_state.recommendations = recommendations
            st.session_state.analysis_completed = True
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            time.sleep(1)
            
            # –û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_bar.empty()
            status_text.empty()
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("üéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")
            
            if st.button("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="primary"):
                st.session_state.current_page = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                st.rerun()
            
        except Exception as e:
            progress_bar.empty()
            status_text.empty()
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    def _render_results_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            if st.button("üîç –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É"):
                st.session_state.current_page = '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                st.rerun()
            return
        
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞")
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2, col3, col4 = st.columns(4)
        
        predictions = st.session_state.predictions
        
        with col1:
            ctr_value = predictions.get('ctr', 0) * 100
            st.metric(
                "CTR", 
                f"{ctr_value:.2f}%",
                delta=f"{ctr_value - 2.0:.2f}% –æ—Ç —Ü–µ–ª–∏"
            )
        
        with col2:
            conv_value = predictions.get('conversion_rate', 0) * 100
            st.metric(
                "–ö–æ–Ω–≤–µ—Ä—Å–∏—è", 
                f"{conv_value:.2f}%",
                delta=f"{conv_value - 5.0:.2f}% –æ—Ç —Ü–µ–ª–∏"
            )
        
        with col3:
            eng_value = predictions.get('engagement', 0) * 100
            st.metric(
                "–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", 
                f"{eng_value:.2f}%",
                delta=f"{eng_value - 10.0:.2f}% –æ—Ç —Ü–µ–ª–∏"
            )
        
        with col4:
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            overall_score = (ctr_value/2.0 + conv_value/5.0 + eng_value/10.0) / 3 * 100
            st.metric(
                "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", 
                f"{overall_score:.0f}/100",
                delta=f"{'–û—Ç–ª–∏—á–Ω–æ' if overall_score > 80 else '–•–æ—Ä–æ—à–æ' if overall_score > 60 else '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}"
            )
        
        st.markdown("---")
        
        # –í–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        tab1, tab2, tab3, tab4 = st.tabs([
            "üé® –¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑",
            "üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è", 
            "üìù –¢–µ–∫—Å—Ç",
            "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
        ])
        
        analysis_results = st.session_state.analysis_results
        
        with tab1:
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            
            if 'color_analysis' in analysis_results:
                color_data = analysis_results['color_analysis']
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                color_fig = self.visualizer.plot_color_analysis(color_data)
                st.plotly_chart(color_fig, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**")
                    st.write(f"‚Ä¢ –Ø—Ä–∫–æ—Å—Ç—å: {color_data.get('brightness', 0):.2f}")
                    st.write(f"‚Ä¢ –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å: {color_data.get('saturation', 0):.2f}")
                    st.write(f"‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {color_data.get('contrast_score', 0):.2f}")
                    st.write(f"‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏—è: {color_data.get('harmony_score', 0):.2f}")
                
                with col2:
                    st.markdown("**–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞:**")
                    if 'dominant_colors' in color_data:
                        colors = color_data['dominant_colors'][:5]
                        for i, color in enumerate(colors):
                            color_name = f"rgb({color[0]},{color[1]},{color[2]})"
                            st.markdown(
                                f"<div style='background-color: {color_name}; "
                                f"padding: 10px; margin: 2px; border-radius: 5px;'>"
                                f"–¶–≤–µ—Ç {i+1}: {color_name}</div>",
                                unsafe_allow_html=True
                            )
        
        with tab2:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
            
            if 'composition_analysis' in analysis_results:
                comp_data = analysis_results['composition_analysis']
                
                # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                comp_fig = self.visualizer.plot_composition_analysis(comp_data)
                st.plotly_chart(comp_fig, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.markdown("**–ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")
                
                metrics = [
                    ("–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π", comp_data.get('rule_of_thirds_score', 0)),
                    ("–í–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", comp_data.get('visual_balance_score', 0)),
                    ("–°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏", comp_data.get('composition_complexity', 0)),
                    ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å", comp_data.get('center_focus_score', 0)),
                ]
                
                for metric_name, value in metrics:
                    progress_color = "green" if value > 0.7 else "orange" if value > 0.4 else "red"
                    st.markdown(
                        f"**{metric_name}:** {value:.2f} "
                        f"<div style='width: 100%; background-color: #f0f0f0; border-radius: 10px;'>"
                        f"<div style='width: {value*100}%; background-color: {progress_color}; "
                        f"height: 20px; border-radius: 10px;'></div></div>",
                        unsafe_allow_html=True
                    )
        
        with tab3:
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            if 'text_analysis' in analysis_results:
                text_data = analysis_results['text_analysis']
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞:**")
                    st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {text_data.get('text_amount', 0)}")
                    st.write(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {text_data.get('total_characters', 0)}")
                    st.write(f"‚Ä¢ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {text_data.get('readability_score', 0):.2f}")
                    st.write(f"‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—è: {text_data.get('text_hierarchy', 0):.2f}")
                
                with col2:
                    st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞:**")
                    st.write(f"‚Ä¢ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {text_data.get('text_positioning', 0):.2f}")
                    st.write(f"‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {text_data.get('text_contrast', 0):.2f}")
                    
                    has_cta = text_data.get('has_cta', False)
                    cta_status = "‚úÖ –ï—Å—Ç—å" if has_cta else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    st.write(f"‚Ä¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: {cta_status}")
        
        with tab4:
            st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            pred_fig = self.visualizer.plot_performance_prediction(
                predictions,
                analysis_results.get('confidence_intervals')
            )
            st.plotly_chart(pred_fig, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if st.session_state.model_trained:
                feature_importance = self.ml_engine.get_feature_importance('ctr')
                if feature_importance:
                    importance_fig = self.visualizer.plot_feature_importance(feature_importance)
                    st.plotly_chart(importance_fig, use_container_width=True)
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if st.button("üîç –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"):
                with st.expander("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", expanded=True):
                    explanation = self.ml_engine.explain_prediction(
                        st.session_state.image_features
                    )
                    
                    st.markdown("**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:**")
                    for impact in explanation.get('feature_impacts', [])[:5]:
                        st.write(f"‚Ä¢ {impact['feature']}: {impact['impact']} –≤–ª–∏—è–Ω–∏–µ")
                    
                    st.markdown("**–ò–Ω—Å–∞–π—Ç—ã:**")
                    for insight in explanation.get('key_insights', []):
                        st.write(f"‚Ä¢ {insight}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        st.markdown("---")
        if st.button("üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary"):
            st.session_state.current_page = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
            st.rerun()
    
    def _render_recommendations_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫—Ä–µ–∞—Ç–∏–≤–∞")
        
        recommendations = st.session_state.recommendations
        
        if not recommendations:
            st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        high_priority = [r for r in recommendations if r.priority == 'high']
        medium_priority = [r for r in recommendations if r.priority == 'medium']
        low_priority = [r for r in recommendations if r.priority == 'low']
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", len(recommendations))
        with col2:
            st.metric("–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", len(high_priority))
        with col3:
            st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", len(medium_priority))
        with col4:
            total_impact = sum(r.expected_impact for r in recommendations)
            st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ", f"{total_impact:.1%}")
        
        st.markdown("---")
        
        # –í–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        tab1, tab2, tab3 = st.tabs([
            "üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ",
            "üìã –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "üìà –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"
        ])
        
        with tab1:
            st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            
            if high_priority:
                for i, rec in enumerate(high_priority, 1):
                    with st.container():
                        st.markdown(
                            f"""
                            <div class="recommendation-high">
                                <h4>üî• {rec.title}</h4>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {rec.description}</p>
                                <p><strong>–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:</strong> {rec.expected_impact:.1%}</p>
                                <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {rec.confidence:.1%}</p>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                        with st.expander(f"–®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {i}"):
                            for j, step in enumerate(rec.actionable_steps, 1):
                                st.write(f"{j}. {step}")
                        
                        st.markdown("---")
            else:
                st.success("üéâ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º! –ö—Ä–µ–∞—Ç–∏–≤ —Ö–æ—Ä–æ—à–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        with tab2:
            st.subheader("–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                priority_filter = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É",
                    ['high', 'medium', 'low'],
                    default=['high', 'medium', 'low'],
                    format_func=lambda x: {'high': '–í—ã—Å–æ–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'low': '–ù–∏–∑–∫–∏–π'}[x]
                )
            
            with col2:
                category_filter = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    list(set(r.category for r in recommendations)),
                    default=list(set(r.category for r in recommendations)),
                    format_func=lambda x: {
                        'color': '–¶–≤–µ—Ç', 'composition': '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è', 
                        'text': '–¢–µ–∫—Å—Ç', 'overall': '–û–±—â–µ–µ'
                    }.get(x, x)
                )
            
            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            filtered_recs = [
                r for r in recommendations 
                if r.priority in priority_filter and r.category in category_filter
            ]
            
            for i, rec in enumerate(filtered_recs, 1):
                priority_class = f"recommendation-{rec.priority}"
                priority_emoji = {'high': 'üî•', 'medium': '‚ö°', 'low': 'üí°'}[rec.priority]
                
                with st.container():
                    st.markdown(
                        f"""
                        <div class="{priority_class}">
                            <h4>{priority_emoji} {rec.title}</h4>
                            <p>{rec.description}</p>
                            <small>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec.category} | –£–ª—É—á—à–µ–Ω–∏–µ: {rec.expected_impact:.1%} | 
                            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.1%}</small>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    
                    with st.expander(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {i}"):
                        st.markdown("**–ü–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
                        for j, step in enumerate(rec.actionable_steps, 1):
                            st.write(f"{j}. {step}")
        
        with tab3:
            st.subheader("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
            
            action_plan = self.recommender.create_action_plan(recommendations)
            
            # –°–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–∞
            summary = action_plan['summary']
            
            st.markdown(f"""
            **üìä –°–≤–æ–¥–∫–∞:**
            - –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {summary['total_recommendations']}
            - –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {summary['high_priority_count']}
            - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {summary['potential_improvement']}
            - –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {summary['estimated_total_time']}
            """)
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action_plan['immediate_actions']:
                st.markdown("### üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-2 —á–∞—Å–∞)")
                for action in action_plan['immediate_actions']:
                    with st.expander(f"‚ö° {action['title']} (–í–ª–∏—è–Ω–∏–µ: {action['expected_impact']:.1%})"):
                        st.write(action['description'])
                        st.markdown("**–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏:**")
                        for step in action['steps']:
                            st.write(f"‚Ä¢ {step}")
            
            # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action_plan['short_term_actions']:
                st.markdown("### üìÖ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (2-4 —á–∞—Å–∞)")
                for action in action_plan['short_term_actions']:
                    with st.expander(f"üîß {action['title']} (–í–ª–∏—è–Ω–∏–µ: {action['expected_impact']:.1%})"):
                        st.write(action['description'])
                        st.markdown("**–î–µ–π—Å—Ç–≤–∏—è:**")
                        for step in action['steps']:
                            st.write(f"‚Ä¢ {step}")
            
            # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
            if action_plan['long_term_improvements']:
                st.markdown("### üîÆ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (4+ —á–∞—Å–æ–≤)")
                for action in action_plan['long_term_improvements']:
                    with st.expander(f"üéØ {action['title']} (–í–ª–∏—è–Ω–∏–µ: {action['expected_impact']:.1%})"):
                        st.write(action['description'])
    
    def _render_about_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –ø—Ä–æ–µ–∫—Ç–µ'."""
        st.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Creative Performance Predictor")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            ## üéØ –ú–∏—Å—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            
            Creative Performance Predictor - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 
            —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 
            –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
            
            ## üî¨ –ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞
            
            –°–∏—Å—Ç–µ–º–∞ –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö:
            
            **–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ**
            - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ HSV –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            - –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ—Ç–µ–π
            - OCR –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            **–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**
            - Random Forest –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            - XGBoost –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            - –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
            - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ CTR, –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            - –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
            ## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
            
            - **Python** - –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            - **Streamlit** - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            - **OpenCV** - –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
            - **Scikit-learn** - –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            - **XGBoost** - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥
            - **Plotly** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            
            ## üìà –í–µ—Ä—Å–∏—è {APP_VERSION}
            
            –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –≤–∫–ª—é—á–∞–µ—Ç:
            - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            """)
        
        with col2:
            st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏")
            
            if st.session_state.model_trained and 'training_results' in st.session_state:
                training_results = st.session_state.training_results
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
                for target, models in training_results.items():
                    st.markdown(f"**{target.upper()}:**")
                    for model_name, metrics in models.items():
                        r2 = metrics.get('r2_score', 0)
                        st.write(f"‚Ä¢ {model_name}: R¬≤ = {r2:.3f}")
                    st.write("")
            
            st.markdown("### üé® –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            examples = [
                "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞",
                "E-commerce –±–∞–Ω–Ω–µ—Ä", 
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
            ]
            
            for example in examples:
                st.write(f"‚Ä¢ {example}")
            
            st.markdown("### üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
            
            st.markdown("""
            - [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API](https://docs.example.com)
            - [GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π](https://github.com/user/cpp)
            - [–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å](mailto:feedback@example.com)
            """)
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("---")
        st.markdown("### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
            - JPG/JPEG
            - PNG  
            - WEBP
            - BMP
            """)
        
        with col2:
            st.markdown("""
            **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB
            - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 100x100
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 8192x8192
            """)
        
        with col3:
            st.markdown("""
            **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
            - –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: < 5 —Å–µ–∫—É–Ω–¥
            - –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: R¬≤ > 0.85
            - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 20+
            """)
    
    def _create_demo_image(self) -> Optional[Image.Image]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            from PIL import ImageDraw, ImageFont
            import numpy as np
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            width, height = 800, 600
            image = Image.new('RGB', (width, height))
            draw = ImageDraw.Draw(image)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (–∂–µ–ª—Ç—ã–π –∫–∞–∫ —É –ú–∞–∫—Å–∏–º–∞)
            for y in range(height):
                # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —è—Ä–∫–æ-–∂–µ–ª—Ç–æ–≥–æ –∫ –æ—Ä–∞–Ω–∂–µ–≤–æ–º—É
                color_intensity = int(255 * (1 - y / height * 0.3))
                color = (255, color_intensity, 0)  # –ñ–µ–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                draw.line([(0, y), (width, y)], fill=color)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font_large = ImageFont.load_default()
                font_medium = ImageFont.load_default()
            except:
                font_large = font_medium = None
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            text_main = "DEMO CREATIVE"
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            try:
                # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Pillow
                bbox = draw.textbbox((0, 0), text_main, font=font_large)
                text_w = bbox[2] - bbox[0]
                text_h = bbox[3] - bbox[1]
            except AttributeError:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Pillow
                try:
                    text_w, text_h = draw.textsize(text_main, font=font_large)
                except:
                    text_w, text_h = 200, 40
                    
            x = (width - text_w) // 2
            y = height // 3
            
            # –¢–µ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            draw.text((x+3, y+3), text_main, fill=(50, 50, 50), font=font_large)
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), text_main, fill=(255, 255, 255), font=font_large)
            
            # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
            text_sub = "Test Image for Analysis"
            try:
                bbox2 = draw.textbbox((0, 0), text_sub, font=font_medium)
                text_w2 = bbox2[2] - bbox2[0]
                text_h2 = bbox2[3] - bbox2[1]
            except AttributeError:
                try:
                    text_w2, text_h2 = draw.textsize(text_sub, font=font_medium)
                except:
                    text_w2, text_h2 = 150, 20
                    
            x2 = (width - text_w2) // 2
            y2 = y + text_h + 20
            draw.text((x2, y2), text_sub, fill=(100, 100, 100), font=font_medium)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –ö—Ä—É–≥ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            circle_x, circle_y = width - 150, 100
            draw.ellipse([circle_x-50, circle_y-50, circle_x+50, circle_y+50], 
                        fill=(255, 100, 100), outline=(200, 50, 50), width=3)
            
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            rect_x, rect_y = 100, height - 150
            draw.rectangle([rect_x-40, rect_y-30, rect_x+40, rect_y+30], 
                          fill=(100, 150, 255), outline=(50, 100, 200), width=3)
            
            # CTA –∫–Ω–æ–ø–∫–∞
            button_x, button_y = width // 2, height - 100
            button_w, button_h = 120, 40
            draw.rectangle([button_x-button_w//2, button_y-button_h//2, 
                           button_x+button_w//2, button_y+button_h//2], 
                          fill=(220, 50, 50), outline=(180, 30, 30), width=2)
            
            cta_text = "CLICK HERE"
            try:
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Pillow
                try:
                    bbox3 = draw.textbbox((0, 0), cta_text, font=font_medium)
                    cta_w = bbox3[2] - bbox3[0]
                    cta_h = bbox3[3] - bbox3[1]
                except AttributeError:
                    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Pillow
                    cta_w, cta_h = draw.textsize(cta_text, font=font_medium) if font_medium else (80, 15)
                    
                draw.text((button_x - cta_w//2, button_y - cta_h//2), 
                         cta_text, fill=(255, 255, 255), font=font_medium)
            except:
                pass
            
            return image
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if missing_deps:
        st.error("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        
        st.markdown("### üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é")
        
        st.markdown("""
        **–®–∞–≥ 1: –û–±–Ω–æ–≤–∏—Ç–µ pip –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏**
        ```bash
        pip install --upgrade pip
        pip install -r requirements.txt
        ```
        
        **–®–∞–≥ 2: –ï—Å–ª–∏ OpenCV –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:**
        ```bash
        pip install opencv-python-headless==4.5.5.64
        ```
        
        **–®–∞–≥ 3: –î–ª—è Ubuntu/Debian —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:**
        ```bash
        sudo apt-get update
        sudo apt-get install python3-opencv
        ```
        
        **–®–∞–≥ 4: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
        ```bash
        streamlit run main.py
        ```
        """)
        
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
            st.rerun()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫"):
            for dep in missing_deps:
                st.code(dep)
        
        return
    
    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = CreativePerformanceApp()
    app.run()

if __name__ == "__main__":
    main()
