# main.py
"""
–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Creative Performance Predictor.
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.
"""

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import io
import time
from typing import Dict, Any, Optional
import warnings
warnings.filterwarnings('ignore')

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from image_analyzer import ImageAnalyzer
    from ml_engine import MLEngine
    from visualizer import Visualizer
    from recommender import RecommendationEngine
    from config import (
        APP_TITLE, APP_VERSION, PAGE_ICON, SUPPORTED_IMAGE_FORMATS,
        MAX_IMAGE_SIZE, CUSTOM_CSS, DEMO_INSIGHTS, COLOR_SCHEME
    )
    DEPENDENCIES_OK = True
except ImportError as e:
    st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt.")
    DEPENDENCIES_OK = False
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NameError
    ImageAnalyzer, MLEngine, Visualizer, RecommendationEngine = None, None, None, None
    APP_TITLE, APP_VERSION, PAGE_ICON, SUPPORTED_IMAGE_FORMATS = "Error", "0.0", "‚ùå", []
    MAX_IMAGE_SIZE, CUSTOM_CSS, DEMO_INSIGHTS, COLOR_SCHEME = 0, "", [], {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=f"{APP_TITLE} v{APP_VERSION}",
    page_icon=PAGE_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
if CUSTOM_CSS:
    st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

@st.cache_resource
def get_app_engines():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–≤–∏–∂–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
    """
    analyzer = ImageAnalyzer()
    recommender = RecommendationEngine()
    ml_engine = MLEngine()

    if not ml_engine.is_trained:
        with st.spinner('ü§ñ –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.'):
            training_results = ml_engine.train_models(quick_mode=True)
            st.session_state.training_results = training_results
    
    visualizer = Visualizer()
    return analyzer, ml_engine, visualizer, recommender


class CreativePerformanceApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Creative Performance Predictor."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not DEPENDENCIES_OK:
            st.stop()
            
        self.analyzer, self.ml_engine, self.visualizer, self.recommender = get_app_engines()
        self._initialize_session_state()
    
    def _initialize_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
        session_defaults = {
            'image_uploaded': False,
            'analysis_completed': False,
            'current_image': None,
            'image_features': {},
            'predictions': {},
            'recommendations': [],
            'analysis_results': {},
            'current_page': '–ì–ª–∞–≤–Ω–∞—è'
        }
        
        for key, default_value in session_defaults.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        st.markdown(f'<h1 class="main-header">{PAGE_ICON} {APP_TITLE}</h1>', unsafe_allow_html=True)
        self._render_sidebar()
        
        page = st.session_state.get('current_page', '–ì–ª–∞–≤–Ω–∞—è')
        
        page_map = {
            '–ì–ª–∞–≤–Ω–∞—è': self._render_home_page,
            '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': self._render_analysis_page,
            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã': self._render_results_page,
            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': self._render_recommendations_page,
            '–û –ø—Ä–æ–µ–∫—Ç–µ': self._render_about_page,
        }
        
        page_function = page_map.get(page)
        if page_function:
            page_function()
    
    def _render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
        with st.sidebar:
            st.markdown("### üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            pages = [
                ('üè†', '–ì–ª–∞–≤–Ω–∞—è'),
                ('üîç', '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
                ('üìä', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'),
                ('üí°', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'),
                ('‚ÑπÔ∏è', '–û –ø—Ä–æ–µ–∫—Ç–µ')
            ]
            
            for icon, page_name in pages:
                if st.button(f"{icon} {page_name}", key=f"nav_{page_name}", use_container_width=True):
                    st.session_state.current_page = page_name
                    st.rerun()
            
            st.markdown("---")
            st.markdown("### üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            
            if self.ml_engine.is_trained:
                st.success("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                st.warning("‚è≥ –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è...")

            if st.session_state.image_uploaded:
                st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                st.info("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            if st.session_state.analysis_completed:
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            st.markdown("---")
            st.markdown("### üí≠ –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?")
            insight = np.random.choice(DEMO_INSIGHTS)
            st.info(insight)
            st.markdown("---")
            st.caption(f"–í–µ—Ä—Å–∏—è {APP_VERSION}")
    
    def _render_home_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("## üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Creative Performance Predictor!")
            st.markdown("–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
            st.markdown("### üîç –ß—Ç–æ —É–º–µ–µ—Ç —Å–∏—Å—Ç–µ–º–∞:")
            st.markdown("- **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö, –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n"
                        "- **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**: –ø—Ä–æ–≥–Ω–æ–∑ CTR, –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏.\n"
                        "- **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
                st.session_state.current_page = '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                st.rerun()

        with col2:
            st.markdown("### üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
            metrics_data = [
                ("üéØ", "–¢–æ—á–Ω–æ—Å—Ç—å", "R¬≤ > 0.80"),
                ("‚ö°", "–°–∫–æ—Ä–æ—Å—Ç—å", "< 5 —Å–µ–∫"),
                ("üîß", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "10+ —Å–æ–≤–µ—Ç–æ–≤"),
                ("üì±", "–§–æ—Ä–º–∞—Ç—ã", "JPG, PNG, WEBP")
            ]
            for icon, metric, value in metrics_data:
                st.markdown(f'<div class="metric-card"><h4>{icon} {metric}</h4><p>{value}</p></div>', unsafe_allow_html=True)

    def _render_analysis_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        st.header("üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
        col1, col2 = st.columns(2)
        with col1:
            category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—Ä–µ–∞—Ç–∏–≤–∞", ['–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', 'E-commerce', '–§–∏–Ω–∞–Ω—Å—ã', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'])
        with col2:
            region = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", ['–†–æ—Å—Å–∏—è', '–°–®–ê', '–ï–≤—Ä–æ–ø–∞'])

        st.session_state.category = category
        st.session_state.region = region

        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", type=SUPPORTED_IMAGE_FORMATS, help=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_IMAGE_FORMATS)}. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {MAX_IMAGE_SIZE // (1024*1024)}MB")
        
        if uploaded_file is not None:
            if uploaded_file.size > MAX_IMAGE_SIZE:
                st.error(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_IMAGE_SIZE // (1024*1024)}MB")
                return
            
            try:
                image = Image.open(uploaded_file).convert("RGB")
                st.session_state.current_image = image
                st.session_state.image_uploaded = True
                
                img_col, info_col = st.columns([2, 1])
                with img_col:
                    st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
                with info_col:
                    st.markdown("### üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {image.size[0]}√ó{image.size[1]}px")
                    st.write(f"**–§–æ—Ä–º–∞—Ç:** {image.format}")
                    st.write(f"**–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}")
                    st.write(f"**–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω:** {region}")

                if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
                    self._perform_analysis(image, category, region)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
        else:
            st.info("üëÜ **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/—Ä–µ–≥–∏–æ–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑**")
            if st.button("üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
                demo_image = self._create_demo_image()
                if demo_image:
                    st.session_state.current_image = demo_image
                    st.session_state.image_uploaded = True
                    st.success("‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑'.")
                    st.rerun()

    def _perform_analysis(self, image: Image.Image, category: str, region: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        progress_bar = st.progress(0, text="üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...")
        
        try:
            def update_progress(percent, text):
                progress_bar.progress(percent, text=text)
                time.sleep(0.2)

            update_progress(10, "üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
            if not self.analyzer.load_image(image):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.")
                return
            
            color_analysis = self.analyzer.analyze_colors()
            update_progress(30, "üìê –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏...")
            composition_analysis = self.analyzer.analyze_composition()
            update_progress(50, "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
            text_analysis = self.analyzer.analyze_text()
            update_progress(70, "üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML...")
            image_features = self.analyzer.get_all_features()
            image_features['category'] = category
            image_features['region'] = region
            st.session_state.image_features = image_features

            update_progress(80, "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            predictions = self.ml_engine.predict(image_features)
            confidence_intervals = self.ml_engine.get_prediction_confidence(image_features)
            update_progress(90, "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            recommendations = self.recommender.generate_recommendations(image_features, predictions)
            
            st.session_state.analysis_results = {
                'color_analysis': color_analysis, 'composition_analysis': composition_analysis,
                'text_analysis': text_analysis, 'image_features': image_features,
                'predictions': predictions, 'confidence_intervals': confidence_intervals,
                'recommendations': recommendations
            }
            st.session_state.predictions = predictions
            st.session_state.recommendations = recommendations
            st.session_state.analysis_completed = True
            
            update_progress(100, "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            time.sleep(1)
            progress_bar.empty()
            
            st.success("üéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'.")
            if st.button("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="primary"):
                st.session_state.current_page = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'
                st.rerun()

        except Exception as e:
            progress_bar.empty()
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            st.exception(e)

    def _render_results_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'.")
            return
        
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        predictions = st.session_state.predictions
        
        with col1:
            st.metric("CTR", f"{predictions.get('ctr', 0) * 100:.2f}%")
        with col2:
            st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{predictions.get('conversion_rate', 0) * 100:.2f}%")
        with col3:
            st.metric("–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", f"{predictions.get('engagement', 0) * 100:.2f}%")
        with col4:
            explanation = self.ml_engine.explain_prediction(st.session_state.image_features)
            st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", explanation['performance_category'])
        
        st.markdown("---")
        
        tab1, tab2, tab3, tab4 = st.tabs(["üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", "üé® –¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑", "üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è", "üìù –¢–µ–∫—Å—Ç"])
        
        analysis_results = st.session_state.analysis_results
        
        with tab1:
            st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
            pred_fig = self.visualizer.plot_performance_prediction(predictions, analysis_results.get('confidence_intervals'))
            st.plotly_chart(pred_fig, use_container_width=True)
            feature_importance = self.ml_engine.get_feature_importance('ctr')
            if feature_importance:
                importance_fig = self.visualizer.plot_feature_importance(feature_importance)
                st.plotly_chart(importance_fig, use_container_width=True)
        
        with tab2:
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            if 'color_analysis' in analysis_results:
                color_fig = self.visualizer.plot_color_analysis(analysis_results['color_analysis'])
                st.plotly_chart(color_fig, use_container_width=True)
        
        with tab3:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
            if 'composition_analysis' in analysis_results:
                comp_fig = self.visualizer.plot_composition_analysis(analysis_results['composition_analysis'])
                st.plotly_chart(comp_fig, use_container_width=True)

        with tab4:
            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if 'text_analysis' in analysis_results:
                text_data = analysis_results['text_analysis']
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤", text_data.get('text_amount', 0))
                    st.metric("–°–∏–º–≤–æ–ª–æ–≤", text_data.get('total_characters', 0))
                    cta_status = "‚úÖ –ï—Å—Ç—å" if text_data.get('has_cta', False) else "‚ùå –ù–µ—Ç"
                    st.metric("–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é", cta_status)
                with col2:
                    st.progress(text_data.get('readability_score', 0), text=f"–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {text_data.get('readability_score', 0):.2f}")
                    st.progress(text_data.get('text_hierarchy', 0), text=f"–ò–µ—Ä–∞—Ä—Ö–∏—è: {text_data.get('text_hierarchy', 0):.2f}")
                    st.progress(text_data.get('text_contrast', 0), text=f"–ö–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–µ–∫—Å—Ç–∞: {text_data.get('text_contrast', 0):.2f}")

        st.markdown("---")
        if st.button("üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary"):
            st.session_state.current_page = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
            st.rerun()

    def _render_recommendations_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        if not st.session_state.analysis_completed:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'.")
            return
        
        st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫—Ä–µ–∞—Ç–∏–≤–∞")
        recommendations = st.session_state.recommendations
        if not recommendations:
            st.success("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        for rec in recommendations:
            priority_class = f"recommendation-{rec.priority}"
            priority_emoji = {'high': 'üî•', 'medium': '‚ö°', 'low': 'üí°'}.get(rec.priority, 'üí°')
            
            with st.container():
                st.markdown(f'<div class="{priority_class}">', unsafe_allow_html=True)
                st.markdown(f"<h5>{priority_emoji} {rec.title} (–í–ª–∏—è–Ω–∏–µ: {rec.expected_impact:.1%})</h5>", unsafe_allow_html=True)
                st.write(rec.description)
                with st.expander("–ü–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"):
                    for step in rec.actionable_steps:
                        st.write(f"- {step}")
                st.markdown('</div>', unsafe_allow_html=True)
                st.markdown("---")

    def _render_about_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–û –ø—Ä–æ–µ–∫—Ç–µ'."""
        st.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ Creative Performance Predictor")
        st.markdown(f"**–í–µ—Ä—Å–∏—è {APP_VERSION}**\n\n"
                    "–≠—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ "
                    "—Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                    "### üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫\n"
                    "- **Frontend:** Streamlit\n- **Machine Learning:** Scikit-learn\n"
                    "- **Computer Vision:** OpenCV, Pillow\n- **Data Processing:** Pandas, NumPy\n"
                    "- **Visualization:** Plotly")
        
        if 'training_results' in st.session_state:
            with st.expander("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ (R¬≤ score)"):
                st.write(st.session_state.training_results)

    def _create_demo_image(self) -> Optional[Image.Image]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            width, height = 800, 600
            image = Image.new('RGB', (width, height))
            draw = ImageDraw.Draw(image)
            
            for y in range(height):
                r = int(255 * (1 - y/height * 0.2))
                g = int(200 * (1 - y/height * 0.5))
                b = 50
                draw.line([(0, y), (width, y)], fill=(r, g, b))
            
            font_large = ImageFont.load_default(size=50)
            font_medium = ImageFont.load_default(size=25)

            text_main = "DEMO CREATIVE"
            bbox = draw.textbbox((0, 0), text_main, font=font_large)
            x = (width - (bbox[2] - bbox[0])) / 2
            y = height / 3
            draw.text((x, y), text_main, fill="white", font=font_large)
            
            button_x, button_y = width / 2, height - 100
            button_w, button_h = 200, 60
            draw.rectangle([button_x - button_w/2, button_y - button_h/2, button_x + button_w/2, button_y + button_h/2], fill="red")
            
            cta_text = "BUY NOW"
            cta_bbox = draw.textbbox((0, 0), cta_text, font=font_medium)
            cta_x = button_x - (cta_bbox[2] - cta_bbox[0]) / 2
            cta_y = button_y - (cta_bbox[3] - cta_bbox[1]) / 2
            draw.text((cta_x, cta_y), cta_text, fill="white", font=font_medium)
            
            return image
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            return None


if __name__ == "__main__":
    if DEPENDENCIES_OK:
        app = CreativePerformanceApp()
        app.run()
