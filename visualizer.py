# visualizer.py - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ú–æ–¥—É–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Creative Performance Predictor.
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, heatmaps –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Any, Optional
from PIL import Image, ImageDraw, ImageFont
import colorsys
import math

from config import COLOR_SCHEME, PLOT_CONFIG, get_color_name

class AdvancedVisualizer:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç heatmaps, 3D –≥—Ä–∞—Ñ–∏–∫–∏, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã.
    """
    
    def __init__(self):
        self.color_scheme = COLOR_SCHEME
        self.plot_config = PLOT_CONFIG
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        self.advanced_colors = {
            'performance_excellent': '#00C851',
            'performance_good': '#33B679', 
            'performance_average': '#FF9800',
            'performance_poor': '#F44336',
            'ctr_color': '#2196F3',
            'conversion_color': '#4CAF50', 
            'engagement_color': '#FF9800',
            'attention_heat': '#FF5722',
            'trust_color': '#3F51B5',
            'emotion_color': '#E91E63'
        }
        
        # –ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self.performance_thresholds = {
            'ctr': {'excellent': 0.04, 'good': 0.025, 'average': 0.015},
            'conversion_rate': {'excellent': 0.08, 'good': 0.05, 'average': 0.03},
            'engagement': {'excellent': 0.15, 'good': 0.10, 'average': 0.06}
        }
        
    def create_performance_dashboard(self, predictions: Dict[str, float], 
                                   confidence_intervals: Optional[Dict[str, Tuple[float, float]]] = None,
                                   benchmarks: Optional[Dict[str, float]] = None) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        
        fig = make_subplots(
            rows=2, cols=3,
            subplot_titles=[
                '–ü—Ä–æ–≥–Ω–æ–∑—ã vs –ë–µ–Ω—á–º–∞—Ä–∫–∏', '–†–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã',
                '–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å', '–¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑', 'ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'
            ],
            specs=[
                [{'type': 'bar'}, {'type': 'indicator'}, {'type': 'scatter'}],
                [{'type': 'scatterpolar'}, {'type': 'scatter'}, {'type': 'bar'}]
            ],
            vertical_spacing=0.12,
            horizontal_spacing=0.08
        )
        
        metrics = ['CTR', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å']
        values = [predictions['ctr'] * 100, predictions['conversion_rate'] * 100, predictions['engagement'] * 100]
        colors = [self.advanced_colors['ctr_color'], self.advanced_colors['conversion_color'], self.advanced_colors['engagement_color']]
        
        # 1. –ü—Ä–æ–≥–Ω–æ–∑—ã vs –ë–µ–Ω—á–º–∞—Ä–∫–∏
        if benchmarks:
            benchmark_values = [benchmarks.get('ctr', 0.02) * 100, 
                              benchmarks.get('conversion_rate', 0.05) * 100,
                              benchmarks.get('engagement', 0.1) * 100]
            
            fig.add_trace(go.Bar(
                x=metrics, y=benchmark_values, name='–ë–µ–Ω—á–º–∞—Ä–∫ –æ—Ç—Ä–∞—Å–ª–∏',
                marker_color='rgba(128,128,128,0.5)', offsetgroup=1
            ), row=1, col=1)
        
        fig.add_trace(go.Bar(
            x=metrics, y=values, name='–í–∞—à–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã',
            marker_color=colors, offsetgroup=2,
            text=[f'{v:.2f}%' for v in values], textposition='auto'
        ), row=1, col=1)
        
        # 2. –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        composite_score = np.mean([
            values[0] / (self.performance_thresholds['ctr']['good'] * 100),
            values[1] / (self.performance_thresholds['conversion_rate']['good'] * 100),
            values[2] / (self.performance_thresholds['engagement']['good'] * 100)
        ]) * 100
        
        fig.add_trace(go.Indicator(
            mode="gauge+number+delta",
            value=composite_score,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"},
            delta={'reference': 100},
            gauge={
                'axis': {'range': [None, 200]},
                'bar': {'color': self._get_performance_color(composite_score)},
                'steps': [
                    {'range': [0, 80], 'color': "lightgray"},
                    {'range': [80, 120], 'color': "gray"}],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75, 'value': 100}
            }
        ), row=1, col=2)
        
        # 3. –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if confidence_intervals:
            x_pos = [1, 2, 3]
            for i, (metric, (lower, upper)) in enumerate(confidence_intervals.items()):
                y_val = predictions[metric] * 100
                error_y = (upper - predictions[metric]) * 100
                error_y_minus = (predictions[metric] - lower) * 100
                
                fig.add_trace(go.Scatter(
                    x=[x_pos[i]], y=[y_val],
                    error_y=dict(type='data', array=[error_y], arrayminus=[error_y_minus]),
                    mode='markers', marker_size=12, marker_color=colors[i],
                    name=f'{metrics[i]} ¬±95%', showlegend=False
                ), row=1, col=3)
        
        # 4. –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        detailed_metrics = ['–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å', '–î–æ–≤–µ—Ä–∏–µ', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º']
        detailed_values = [
            composite_score * 0.8,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
            composite_score * 0.9,
            composite_score * 0.7,
            composite_score * 0.85,
            composite_score * 0.75
        ]
        
        fig.add_trace(go.Scatterpolar(
            r=detailed_values, theta=detailed_metrics, fill='toself',
            name='–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞', line_color=self.advanced_colors['trust_color']
        ), row=2, col=1)
        
        # 5. –¢—Ä–µ–Ω–¥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ (—Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω']
        baseline = [composite_score] * 6
        with_improvements = [composite_score + i * 5 for i in range(6)]
        
        fig.add_trace(go.Scatter(
            x=months, y=baseline, mode='lines', name='–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å',
            line=dict(dash='dash', color='gray')
        ), row=2, col=2)
        
        fig.add_trace(go.Scatter(
            x=months, y=with_improvements, mode='lines+markers', name='–° —É–ª—É—á—à–µ–Ω–∏—è–º–∏',
            line=dict(color=self.advanced_colors['performance_excellent'])
        ), row=2, col=2)
        
        # 6. ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        roi_potential = [
            (values[0] - self.performance_thresholds['ctr']['average'] * 100) * 2,
            (values[1] - self.performance_thresholds['conversion_rate']['average'] * 100) * 3,
            (values[2] - self.performance_thresholds['engagement']['average'] * 100) * 1.5
        ]
        
        fig.add_trace(go.Bar(
            x=metrics, y=roi_potential, name='ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
            marker_color=[self._get_roi_color(roi) for roi in roi_potential],
            text=[f'+{roi:.1f}%' if roi > 0 else f'{roi:.1f}%' for roi in roi_potential],
            textposition='auto'
        ), row=2, col=3)
        
        fig.update_layout(
            height=800, title_text="üìä –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞",
            template=self.plot_config['template'], showlegend=True,
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
        )
        
        return fig
    
    def create_attention_heatmap(self, image_features: Dict, predictions: Dict) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ heatmap –∑–æ–Ω –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grid_size = 20
        x = np.linspace(0, 100, grid_size)
        y = np.linspace(0, 100, grid_size)
        X, Y = np.meshgrid(x, y)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É –≤–Ω–∏–º–∞–Ω–∏—è
        attention_map = np.zeros((grid_size, grid_size))
        
        # –ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π - –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏
        third_points_x = [33, 67]
        third_points_y = [33, 67]
        
        for tx in third_points_x:
            for ty in third_points_y:
                for i in range(grid_size):
                    for j in range(grid_size):
                        dist = np.sqrt((X[i,j] - tx)**2 + (Y[i,j] - ty)**2)
                        attention_map[i,j] += np.exp(-dist/15) * 0.8
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å
        center_strength = image_features.get('center_focus_score', 0.5)
        for i in range(grid_size):
            for j in range(grid_size):
                dist_center = np.sqrt((X[i,j] - 50)**2 + (Y[i,j] - 50)**2)
                attention_map[i,j] += np.exp(-dist_center/20) * center_strength * 0.6
        
        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
        contrast_boost = image_features.get('contrast_score', 0.5)
        attention_map *= (1 + contrast_boost)
        
        # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ
        if image_features.get('has_cta', False):
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º CTA –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            for i in range(int(grid_size*0.7), grid_size):
                for j in range(int(grid_size*0.7), grid_size):
                    attention_map[i,j] += 0.4
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        attention_map = (attention_map - attention_map.min()) / (attention_map.max() - attention_map.min())
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ colorbar
        fig = go.Figure(data=go.Heatmap(
            z=attention_map, 
            x=x, 
            y=y,
            colorscale=[
                [0, 'rgba(255,255,255,0)'],
                [0.3, 'rgba(255,255,0,0.3)'],
                [0.6, 'rgba(255,165,0,0.6)'],
                [1, 'rgba(255,0,0,0.9)']
            ],
            showscale=True,
            colorbar=dict(
                title=dict(
                    text="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è",
                    side="right"
                ),
                orientation="v",
                len=0.9
            )
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∞–≤–∏–ª–∞ —Ç—Ä–µ—Ç–µ–π
        fig.add_hline(y=33.33, line_dash="dash", line_color="white", opacity=0.7)
        fig.add_hline(y=66.67, line_dash="dash", line_color="white", opacity=0.7)
        fig.add_vline(x=33.33, line_dash="dash", line_color="white", opacity=0.7)
        fig.add_vline(x=66.67, line_dash="dash", line_color="white", opacity=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Å–∏–ª—ã
        fig.add_trace(go.Scatter(
            x=[33.33, 66.67, 33.33, 66.67], 
            y=[33.33, 33.33, 66.67, 66.67],
            mode='markers', 
            marker=dict(size=12, color='white', symbol='x'),
            name='–¢–æ—á–∫–∏ —Å–∏–ª—ã', 
            showlegend=True
        ))
        
        fig.update_layout(
            title="üéØ –ö–∞—Ä—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            xaxis_title="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (%)",
            yaxis_title="–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (%)",
            height=500, 
            template=self.plot_config['template'],
            xaxis=dict(range=[0, 100]),
            yaxis=dict(range=[0, 100], scaleanchor="x", scaleratio=1)
        )
        
        return fig
    
    def create_color_psychology_analysis(self, color_data: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏."""
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=['–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ', '–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞', '–¶–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–ª–∏—Ç—Ä—ã'],
            specs=[
                [{'type': 'bar'}, {'type': 'pie'}],
                [{'type': 'scatter'}, {'type': 'bar'}]
            ]
        )
        
        # 1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Ü–≤–µ—Ç–æ–≤
        emotions = ['–î–æ–≤–µ—Ä–∏–µ', '–≠–Ω–µ—Ä–≥–∏—è', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–¢–µ–ø–ª–æ—Ç–∞', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤
        emotion_scores = self._calculate_emotion_scores(color_data)
        
        fig.add_trace(go.Bar(
            x=emotions, y=emotion_scores,
            marker_color=[
                self.advanced_colors['trust_color'],
                self.advanced_colors['attention_heat'],
                '#4CAF50', '#FF9800', '#3F51B5'
            ],
            text=[f'{score:.1f}' for score in emotion_scores],
            textposition='auto'
        ), row=1, col=1)
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        if 'dominant_colors' in color_data and color_data['dominant_colors']:
            colors = color_data['dominant_colors'][:5]
            color_names = [self._get_color_emotion(color) for color in colors]
            color_hex = [f'rgb({c[0]},{c[1]},{c[2]})' for c in colors]
            
            fig.add_trace(go.Pie(
                labels=color_names, values=[1]*len(colors),
                marker_colors=color_hex,
                textinfo='label+percent'
            ), row=1, col=2)
        
        # 3. –¶–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = ['–ü—Ä–æ–¥–∞–∂–∏', '–î–æ–≤–µ—Ä–∏–µ', '–ü—Ä–µ–º–∏—É–º', '–ú–æ–ª–æ–¥–µ–∂—å', '–≠–∫–æ–ª–æ–≥–∏—è']
        current_fit = [
            self._assess_category_fit(color_data, cat) for cat in categories
        ]
        optimal_fit = [0.9, 0.85, 0.7, 0.6, 0.8]  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
        fig.add_trace(go.Scatter(
            x=categories, y=current_fit, mode='markers+lines',
            marker=dict(size=12, color=self.advanced_colors['ctr_color']),
            name='–¢–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
        ), row=2, col=1)
        
        fig.add_trace(go.Scatter(
            x=categories, y=optimal_fit, mode='markers+lines',
            marker=dict(size=8, color=self.advanced_colors['performance_excellent']),
            line=dict(dash='dash'), name='–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ'
        ), row=2, col=1)
        
        # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_areas = ['–ö–æ–Ω—Ç—Ä–∞—Å—Ç', '–ì–∞—Ä–º–æ–Ω–∏—è', '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']
        current_values = [
            color_data.get('contrast_score', 0.5) * 100,
            color_data.get('harmony_score', 0.5) * 100,
            color_data.get('saturation', 0.5) * 100,
            color_data.get('color_temperature', 0.5) * 100
        ]
        target_values = [80, 75, 70, 60]  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
        fig.add_trace(go.Bar(
            x=optimization_areas, y=current_values, name='–¢–µ–∫—É—â–∏–µ',
            marker_color=self.advanced_colors['conversion_color'], opacity=0.7
        ), row=2, col=2)
        
        fig.add_trace(go.Bar(
            x=optimization_areas, y=target_values, name='–¶–µ–ª—å',
            marker_color=self.advanced_colors['performance_excellent'], opacity=0.5
        ), row=2, col=2)
        
        fig.update_layout(
            height=700, title_text="üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è",
            template=self.plot_config['template']
        )
        
        return fig
    
    def create_performance_prediction_detailed(self, predictions: Dict[str, float],
                                             feature_importance: List[Tuple[str, float]],
                                             confidence_intervals: Dict) -> go.Figure:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤."""
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=['–í–∫–ª–∞–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ CTR', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞'],
            specs=[
                [{'type': 'bar'}, {'type': 'scatter'}],
                [{'type': 'bar'}, {'type': 'waterfall'}]
            ]
        )
        
        # 1. –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        if feature_importance:
            factors = [self._translate_feature_name(feat) for feat, _ in feature_importance[:8]]
            importance_values = [imp * 100 for _, imp in feature_importance[:8]]
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ñ–∞–∫—Ç–æ—Ä–∞
            colors = [self._get_factor_color(feat) for feat in factors]
            
            fig.add_trace(go.Bar(
                y=factors, x=importance_values, orientation='h',
                marker_color=colors,
                text=[f'{val:.1f}%' for val in importance_values],
                textposition='auto'
            ), row=1, col=1)
        
        # 2. –ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        metrics = ['CTR', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å']
        pred_values = [predictions['ctr'] * 100, predictions['conversion_rate'] * 100, predictions['engagement'] * 100]
        
        if confidence_intervals:
            lower_bounds = [confidence_intervals['ctr'][0] * 100, 
                          confidence_intervals['conversion_rate'][0] * 100,
                          confidence_intervals['engagement'][0] * 100]
            upper_bounds = [confidence_intervals['ctr'][1] * 100,
                          confidence_intervals['conversion_rate'][1] * 100, 
                          confidence_intervals['engagement'][1] * 100]
            
            for i, metric in enumerate(metrics):
                # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                fig.add_trace(go.Scatter(
                    x=[metric], y=[pred_values[i]], 
                    mode='markers', marker=dict(size=15, color=self.advanced_colors['ctr_color']),
                    name=f'{metric} (–ø—Ä–æ–≥–Ω–æ–∑)', showlegend=(i==0)
                ), row=1, col=2)
                
                # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                fig.add_trace(go.Scatter(
                    x=[metric, metric], y=[lower_bounds[i], upper_bounds[i]],
                    mode='lines', line=dict(width=6, color=self.advanced_colors['ctr_color']),
                    name='95% –∏–Ω—Ç–µ—Ä–≤–∞–ª', showlegend=(i==0), opacity=0.3
                ), row=1, col=2)
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
        industry_benchmarks = [2.5, 5.0, 10.0]  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
        
        x_metrics = ['CTR', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è', '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å']
        
        fig.add_trace(go.Bar(
            x=x_metrics, y=pred_values, name='–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑',
            marker_color=self.advanced_colors['ctr_color']
        ), row=2, col=1)
        
        fig.add_trace(go.Bar(
            x=x_metrics, y=industry_benchmarks, name='–û—Ç—Ä–∞—Å–ª–µ–≤–æ–π –±–µ–Ω—á–º–∞—Ä–∫',
            marker_color=self.advanced_colors['performance_good'], opacity=0.7
        ), row=2, col=1)
        
        # 4. Waterfall chart –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π
        baseline = pred_values[0]  # –ë–µ—Ä–µ–º CTR –∫–∞–∫ –±–∞–∑—É
        improvements = [
            ('–ë–∞–∑–æ–≤—ã–π CTR', baseline),
            ('–¶–≤–µ—Ç–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 0.3),
            ('–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏', 0.4),
            ('–¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 0.2),
            ('–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', 0.3)
        ]
        
        cumulative = baseline
        waterfall_values = [baseline]
        waterfall_labels = ['–¢–µ–∫—É—â–∏–π']
        
        for label, improvement in improvements[1:]:
            waterfall_values.append(improvement)
            waterfall_labels.append(label)
            cumulative += improvement
        
        waterfall_values.append(cumulative - baseline)
        waterfall_labels.append('–ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª')
        
        fig.add_trace(go.Waterfall(
            x=waterfall_labels[1:], y=waterfall_values[1:],
            base=baseline, name="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏–π",
            increasing={"marker":{"color":self.advanced_colors['performance_excellent']}},
            totals={"marker":{"color":self.advanced_colors['trust_color']}}
        ), row=2, col=2)
        
        fig.update_layout(
            height=700, title_text="üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            template=self.plot_config['template']
        )
        
        return fig
    
    def create_recommendation_impact_chart(self, recommendations: List) -> go.Figure:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–ª–∏—è–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        
        if not recommendations:
            fig = go.Figure()
            fig.add_annotation(
                text="–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                xref="paper", yref="paper", x=0.5, y=0.5,
                showarrow=False, font_size=16
            )
            return fig
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        titles = [rec.title[:30] + '...' if len(rec.title) > 30 else rec.title for rec in recommendations]
        impacts = [rec.expected_impact * 100 for rec in recommendations]
        efforts = [rec.effort_level for rec in recommendations]
        priorities = [rec.priority for rec in recommendations]
        
        # –†–∞–∑–º–µ—Ä—ã –ø—É–∑—ã—Ä—å–∫–æ–≤ –¥–ª—è effort level
        effort_sizes = {'low': 20, 'medium': 35, 'high': 50}
        sizes = [effort_sizes[effort] for effort in efforts]
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_colors = {
            'high': self.advanced_colors['attention_heat'],
            'medium': self.advanced_colors['engagement_color'],
            'low': self.advanced_colors['performance_good']
        }
        colors = [priority_colors[priority] for priority in priorities]
        
        fig = go.Figure()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π scatter plot
        fig.add_trace(go.Scatter(
            x=list(range(len(titles))), y=impacts,
            mode='markers+text',
            marker=dict(size=sizes, color=colors, opacity=0.7,
                       line=dict(width=2, color='white')),
            text=titles, textposition='top center',
            customdata=list(zip(efforts, priorities)),
            hovertemplate='<b>%{text}</b><br>' +
                         '–í–ª–∏—è–Ω–∏–µ: %{y:.1f}%<br>' +
                         '–£—Å–∏–ª–∏—è: %{customdata[0]}<br>' +
                         '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %{customdata[1]}<br>' +
                         '<extra></extra>'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        fig.add_hline(y=15, line_dash="dash", line_color="green", 
                     annotation_text="–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ (>15%)")
        fig.add_hline(y=8, line_dash="dash", line_color="orange",
                     annotation_text="–°—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ (8-15%)")
        
        fig.update_layout(
            title="üí° –ö–∞—Ä—Ç–∞ –≤–ª–∏—è–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            xaxis_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)",
            yaxis_title="–û–∂–∏–¥–∞–µ–º–æ–µ –≤–ª–∏—è–Ω–∏–µ (%)",
            height=500, template=self.plot_config['template'],
            xaxis=dict(showticklabels=False),
            annotations=[
                dict(x=0.02, y=0.98, xref='paper', yref='paper',
                     text='–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞ = —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π', showarrow=False,
                     font=dict(size=12), bgcolor='rgba(255,255,255,0.8)')
            ]
        )
        
        return fig
    
    def create_composition_analysis_3d(self, composition_data: Dict[str, Any]) -> go.Figure:
        """3D –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."""
        
        # –°–æ–∑–¥–∞–µ–º 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        metrics = ['rule_of_thirds_score', 'visual_balance_score', 'symmetry_score', 
                  'center_focus_score', 'composition_complexity', 'negative_space']
        
        values = [composition_data.get(metric, 0.5) for metric in metrics]
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è 3D –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        x_pos = [0, 1, 2, 0, 1, 2]
        y_pos = [0, 0, 0, 1, 1, 1]
        z_pos = [0] * 6
        
        dx = [0.8] * 6
        dy = [0.8] * 6  
        dz = values
        
        colors = [self._get_composition_color(val) for val in values]
        
        fig = go.Figure(data=[go.Mesh3d(
            x=[0, 1, 2, 0, 1, 2] * 4,  # –°–æ–∑–¥–∞–µ–º 3D —Å—Ç–æ–ª–±—Ü—ã
            y=[0, 0, 0, 1, 1, 1] * 4,
            z=[0, 0, 0, 0, 0, 0] + values + values + [v*2 for v in values],
            colorscale='Viridis',
            intensity=values * 4,
            showscale=True
        )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        for i, (metric, value) in enumerate(zip(metrics, values)):
            fig.add_trace(go.Scatter3d(
                x=[x_pos[i]], y=[y_pos[i]], z=[value + 0.1],
                mode='text',
                text=[f'{self._translate_composition_metric(metric)}<br>{value:.2f}'],
                textfont=dict(size=10),
                showlegend=False
            ))
        
        fig.update_layout(
            title="üèóÔ∏è 3D –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
            scene=dict(
                xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞",
                yaxis_title="–¢–∏–ø –º–µ—Ç—Ä–∏–∫–∏", 
                zaxis_title="–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
                camera=dict(eye=dict(x=1.2, y=1.2, z=1.2))
            ),
            height=600
        )
        
        return fig
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _get_performance_color(self, score: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if score >= 120:
            return self.advanced_colors['performance_excellent']
        elif score >= 100:
            return self.advanced_colors['performance_good']
        elif score >= 80:
            return self.advanced_colors['engagement_color']
        else:
            return self.advanced_colors['performance_poor']
    
    def _get_roi_color(self, roi: float) -> str:
        """–¶–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞."""
        if roi > 5:
            return self.advanced_colors['performance_excellent']
        elif roi > 0:
            return self.advanced_colors['performance_good']
        else:
            return self.advanced_colors['performance_poor']
    
    def _calculate_emotion_scores(self, color_data: Dict) -> List[float]:
        """–†–∞—Å—á–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤."""
        # –ë–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        harmony = color_data.get('harmony_score', 0.5)
        temperature = color_data.get('color_temperature', 0.5)
        saturation = color_data.get('saturation', 0.5)
        brightness = color_data.get('brightness', 0.5)
        
        trust = harmony * 0.6 + (1 - temperature) * 0.4  # –•–æ–ª–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞ = –¥–æ–≤–µ—Ä–∏–µ
        energy = saturation * 0.7 + brightness * 0.3      # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å = —ç–Ω–µ—Ä–≥–∏—è
        calm = (1 - saturation) * 0.5 + harmony * 0.5     # –ù–∏–∑–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å = —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
        warmth = temperature * 0.8 + brightness * 0.2     # –¢–µ–ø–ª—ã–µ —Ç–æ–Ω–∞ = —Ç–µ–ø–ª–æ—Ç–∞
        professional = harmony * 0.5 + (1 - saturation) * 0.3 + (1 - brightness) * 0.2
        
        return [trust * 10, energy * 10, calm * 10, warmth * 10, professional * 10]
    
    def _get_color_emotion(self, color: Tuple[int, int, int]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–≤–µ—Ç–∞."""
        r, g, b = color
        h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)
        hue = h * 360
        
        if 0 <= hue <= 60 or 300 <= hue <= 360:
            return "–≠–Ω–µ—Ä–≥–∏—è/–°—Ç—Ä–∞—Å—Ç—å"
        elif 60 <= hue <= 120:
            return "–†–æ—Å—Ç/–ü—Ä–∏—Ä–æ–¥–∞"
        elif 120 <= hue <= 180:
            return "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
        elif 180 <= hue <= 240:
            return "–î–æ–≤–µ—Ä–∏–µ/–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
        elif 240 <= hue <= 300:
            return "–†–æ—Å–∫–æ—à—å/–ú–∏—Å—Ç–∏–∫–∞"
        else:
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    
    def _assess_category_fit(self, color_data: Dict, category: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏
        temperature = color_data.get('color_temperature', 0.5)
        saturation = color_data.get('saturation', 0.5)
        harmony = color_data.get('harmony_score', 0.5)
        
        if category == '–ü—Ä–æ–¥–∞–∂–∏':
            return min(temperature * 0.7 + saturation * 0.3, 1.0)
        elif category == '–î–æ–≤–µ—Ä–∏–µ':
            return min((1 - temperature) * 0.6 + harmony * 0.4, 1.0)
        elif category == '–ü—Ä–µ–º–∏—É–º':
            return min(harmony * 0.5 + (1 - saturation) * 0.5, 1.0)
        elif category == '–ú–æ–ª–æ–¥–µ–∂—å':
            return min(saturation * 0.8 + temperature * 0.2, 1.0)
        elif category == '–≠–∫–æ–ª–æ–≥–∏—è':
            return min((1 - temperature) * 0.4 + saturation * 0.3 + harmony * 0.3, 1.0)
        
        return 0.5
    
    def _translate_feature_name(self, feature: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
        translations = {
            'contrast_score': '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å',
            'harmony_score': '–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
            'rule_of_thirds_score': '–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π',
            'visual_balance_score': '–í–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
            'readability_score': '–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞',
            'has_cta': '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
            'brightness': '–Ø—Ä–∫–æ—Å—Ç—å',
            'saturation': '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å',
            'color_temperature': '–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'text_contrast': '–ö–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–µ–∫—Å—Ç–∞',
            'composition_complexity': '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏',
            'emotional_impact': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ'
        }
        return translations.get(feature, feature)
    
    def _get_factor_color(self, factor: str) -> str:
        """–¶–≤–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ –ø–æ —Ç–∏–ø—É."""
        if any(word in factor.lower() for word in ['—Ü–≤–µ—Ç', '—è—Ä–∫–æ—Å—Ç—å', '–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å']):
            return self.advanced_colors['emotion_color']
        elif any(word in factor.lower() for word in ['—Ç–µ–∫—Å—Ç', '—á–∏—Ç–∞–µ–º–æ—Å—Ç—å', '–∫–æ–Ω—Ç—Ä–∞—Å—Ç']):
            return self.advanced_colors['trust_color']
        elif any(word in factor.lower() for word in ['–∫–æ–º–ø–æ–∑–∏—Ü–∏—è', '–±–∞–ª–∞–Ω—Å', '–ø—Ä–∞–≤–∏–ª–æ']):
            return self.advanced_colors['ctr_color']
        else:
            return self.advanced_colors['performance_good']
    
    def _get_composition_color(self, value: float) -> str:
        """–¶–≤–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏."""
        if value >= 0.8:
            return self.advanced_colors['performance_excellent']
        elif value >= 0.6:
            return self.advanced_colors['performance_good']
        elif value >= 0.4:
            return self.advanced_colors['engagement_color']
        else:
            return self.advanced_colors['performance_poor']
    
    def _translate_composition_metric(self, metric: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏."""
        translations = {
            'rule_of_thirds_score': '–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π',
            'visual_balance_score': '–ë–∞–ª–∞–Ω—Å',
            'symmetry_score': '–°–∏–º–º–µ—Ç—Ä–∏—è',
            'center_focus_score': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å',
            'composition_complexity': '–°–ª–æ–∂–Ω–æ—Å—Ç—å',
            'negative_space': '–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ'
        }
        return translations.get(metric, metric)


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
Visualizer = AdvancedVisualizer
