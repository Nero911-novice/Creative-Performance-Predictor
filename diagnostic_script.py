# check_dependencies.py
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Creative Performance Predictor.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import sys
import subprocess
import importlib
from typing import Dict, List, Tuple

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python."""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 8:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False

def check_package(package_name: str, import_name: str = None) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞."""
    if import_name is None:
        import_name = package_name
    
    try:
        importlib.import_module(import_name)
        return True, "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    except ImportError as e:
        return False, f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}"

def install_package(package_name: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞."""
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", package_name, "--quiet"
        ])
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîç Creative Performance Predictor - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if not check_python_version():
        print("\nüõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.8+")
        return
    
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    core_packages = [
        ("streamlit", "streamlit"),
        ("pandas", "pandas"),
        ("numpy", "numpy"),
        ("scikit-learn", "sklearn"),
        ("Pillow", "PIL"),
        ("matplotlib", "matplotlib"),
        ("plotly", "plotly"),
        ("scipy", "scipy"),
        ("joblib", "joblib")
    ]
    
    missing_core = []
    
    for package, import_name in core_packages:
        success, message = check_package(import_name)
        print(f"  {package}: {message}")
        if not success:
            missing_core.append(package)
    
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞–∫–µ—Ç—ã
    advanced_packages = [
        ("opencv-python-headless", "cv2"),
        ("xgboost", "xgboost"),
        ("seaborn", "seaborn"),
        ("easyocr", "easyocr"),
        ("pytesseract", "pytesseract"),
        ("ultralytics", "ultralytics"),
        ("torch", "torch"),
        ("torchvision", "torchvision")
    ]
    
    missing_advanced = []
    working_advanced = []
    
    for package, import_name in advanced_packages:
        success, message = check_package(import_name)
        print(f"  {package}: {message}")
        if not success:
            missing_advanced.append(package)
        else:
            working_advanced.append(package)
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 70)
    
    if not missing_core:
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for pkg in missing_core:
            print(f"   - {pkg}")
    
    if working_advanced:
        print(f"\n‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(working_advanced)}):")
        for pkg in working_advanced:
            print(f"   - {pkg}")
    
    if missing_advanced:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(missing_advanced)}):")
        for pkg in missing_advanced:
            print(f"   - {pkg}")
        print("   (–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞:")
    
    project_modules = [
        "config",
        "image_analyzer", 
        "ml_engine",
        "visualizer",
        "recommender"
    ]
    
    missing_modules = []
    
    for module in project_modules:
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}.py")
        except ImportError as e:
            print(f"  ‚ùå {module}.py: {e}")
            missing_modules.append(module)
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 70)
    
    if missing_core:
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install streamlit pandas numpy scikit-learn Pillow matplotlib plotly scipy joblib")
    
    if missing_advanced:
        print("2. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("   pip install opencv-python-headless xgboost seaborn")
        print("   pip install easyocr pytesseract ultralytics  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    
    if missing_modules:
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        for module in missing_modules:
            print(f"   - {module}.py")
    
    if not missing_core and not missing_modules:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: streamlit run main.py")
    else:
        print("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    print("\nüí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python install_script.py")

if __name__ == "__main__":
    main()
